# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MyAccountBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'float',
        'reserved': 'float',
        'bid_request_amount': 'int',
        'total_available': 'float',
        'go_grow_accounts': 'list[GoGrowAccount]'
    }

    attribute_map = {
        'balance': 'Balance',
        'reserved': 'Reserved',
        'bid_request_amount': 'BidRequestAmount',
        'total_available': 'TotalAvailable',
        'go_grow_accounts': 'GoGrowAccounts'
    }

    def __init__(self, balance=None, reserved=None, bid_request_amount=None, total_available=None, go_grow_accounts=None):  # noqa: E501
        """MyAccountBalance - a model defined in Swagger"""  # noqa: E501

        self._balance = None
        self._reserved = None
        self._bid_request_amount = None
        self._total_available = None
        self._go_grow_accounts = None
        self.discriminator = None

        if balance is not None:
            self.balance = balance
        if reserved is not None:
            self.reserved = reserved
        if bid_request_amount is not None:
            self.bid_request_amount = bid_request_amount
        if total_available is not None:
            self.total_available = total_available
        if go_grow_accounts is not None:
            self.go_grow_accounts = go_grow_accounts

    @property
    def balance(self):
        """Gets the balance of this MyAccountBalance.  # noqa: E501

        Account balance  # noqa: E501

        :return: The balance of this MyAccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this MyAccountBalance.

        Account balance  # noqa: E501

        :param balance: The balance of this MyAccountBalance.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def reserved(self):
        """Gets the reserved of this MyAccountBalance.  # noqa: E501

        Account reserved amount  # noqa: E501

        :return: The reserved of this MyAccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this MyAccountBalance.

        Account reserved amount  # noqa: E501

        :param reserved: The reserved of this MyAccountBalance.  # noqa: E501
        :type: float
        """

        self._reserved = reserved

    @property
    def bid_request_amount(self):
        """Gets the bid_request_amount of this MyAccountBalance.  # noqa: E501

        Api pending auction bid request amount  # noqa: E501

        :return: The bid_request_amount of this MyAccountBalance.  # noqa: E501
        :rtype: int
        """
        return self._bid_request_amount

    @bid_request_amount.setter
    def bid_request_amount(self, bid_request_amount):
        """Sets the bid_request_amount of this MyAccountBalance.

        Api pending auction bid request amount  # noqa: E501

        :param bid_request_amount: The bid_request_amount of this MyAccountBalance.  # noqa: E501
        :type: int
        """

        self._bid_request_amount = bid_request_amount

    @property
    def total_available(self):
        """Gets the total_available of this MyAccountBalance.  # noqa: E501

        Available balance  # noqa: E501

        :return: The total_available of this MyAccountBalance.  # noqa: E501
        :rtype: float
        """
        return self._total_available

    @total_available.setter
    def total_available(self, total_available):
        """Sets the total_available of this MyAccountBalance.

        Available balance  # noqa: E501

        :param total_available: The total_available of this MyAccountBalance.  # noqa: E501
        :type: float
        """

        self._total_available = total_available

    @property
    def go_grow_accounts(self):
        """Gets the go_grow_accounts of this MyAccountBalance.  # noqa: E501

        List of Go and Grow accounts  # noqa: E501

        :return: The go_grow_accounts of this MyAccountBalance.  # noqa: E501
        :rtype: list[GoGrowAccount]
        """
        return self._go_grow_accounts

    @go_grow_accounts.setter
    def go_grow_accounts(self, go_grow_accounts):
        """Sets the go_grow_accounts of this MyAccountBalance.

        List of Go and Grow accounts  # noqa: E501

        :param go_grow_accounts: The go_grow_accounts of this MyAccountBalance.  # noqa: E501
        :type: list[GoGrowAccount]
        """

        self._go_grow_accounts = go_grow_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MyAccountBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MyAccountBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
