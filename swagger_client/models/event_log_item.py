# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventLogItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_date': 'datetime',
        'event_type': 'int',
        'ip_address': 'str',
        'data': 'str'
    }

    attribute_map = {
        'event_date': 'EventDate',
        'event_type': 'EventType',
        'ip_address': 'IpAddress',
        'data': 'Data'
    }

    def __init__(self, event_date=None, event_type=None, ip_address=None, data=None):  # noqa: E501
        """EventLogItem - a model defined in Swagger"""  # noqa: E501

        self._event_date = None
        self._event_type = None
        self._ip_address = None
        self._data = None
        self.discriminator = None

        if event_date is not None:
            self.event_date = event_date
        if event_type is not None:
            self.event_type = event_type
        if ip_address is not None:
            self.ip_address = ip_address
        if data is not None:
            self.data = data

    @property
    def event_date(self):
        """Gets the event_date of this EventLogItem.  # noqa: E501

        Event date  # noqa: E501

        :return: The event_date of this EventLogItem.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this EventLogItem.

        Event date  # noqa: E501

        :param event_date: The event_date of this EventLogItem.  # noqa: E501
        :type: datetime
        """

        self._event_date = event_date

    @property
    def event_type(self):
        """Gets the event_type of this EventLogItem.  # noqa: E501

        Event type  # noqa: E501

        :return: The event_type of this EventLogItem.  # noqa: E501
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventLogItem.

        Event type  # noqa: E501

        :param event_type: The event_type of this EventLogItem.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def ip_address(self):
        """Gets the ip_address of this EventLogItem.  # noqa: E501

        IP address  # noqa: E501

        :return: The ip_address of this EventLogItem.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this EventLogItem.

        IP address  # noqa: E501

        :param ip_address: The ip_address of this EventLogItem.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def data(self):
        """Gets the data of this EventLogItem.  # noqa: E501

        Request data JSON format  # noqa: E501

        :return: The data of this EventLogItem.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EventLogItem.

        Request data JSON format  # noqa: E501

        :param data: The data of this EventLogItem.  # noqa: E501
        :type: str
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventLogItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventLogItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
