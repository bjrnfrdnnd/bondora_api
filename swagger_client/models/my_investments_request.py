# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MyInvestmentsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_issued_date_from': 'datetime',
        'loan_issued_date_to': 'datetime',
        'principal_min': 'float',
        'principal_max': 'float',
        'interest_min': 'float',
        'interest_max': 'float',
        'length_max': 'int',
        'length_min': 'int',
        'late_principal_amount_min': 'float',
        'late_principal_amount_max': 'float',
        'debt_occured_on_from': 'datetime',
        'debt_occured_on_to': 'datetime',
        'debt_occured_on_for_secondary_from': 'datetime',
        'debt_occured_on_for_secondary_to': 'datetime',
        'defaulted_date_from': 'datetime',
        'defaulted_date_to': 'datetime',
        'rescheduled_from': 'datetime',
        'rescheduled_to': 'datetime',
        'sold_date_from': 'datetime',
        'sold_date_to': 'datetime',
        'purchase_date_from': 'datetime',
        'purchase_date_to': 'datetime',
        'next_payment_date_to': 'datetime',
        'next_payment_date_from': 'datetime',
        'last_payment_date_from': 'datetime',
        'last_payment_date_to': 'datetime',
        'countries': 'list[str]',
        'ratings': 'list[str]',
        'credit_score_min': 'int',
        'credit_score_max': 'int',
        'user_name': 'str',
        'loan_status_code': 'list[int]',
        'income_verification_status': 'int',
        'loan_debt_management_stage': 'int',
        'loan_debt_management_stage_type': 'int',
        'loan_debt_management_date_active_from': 'datetime',
        'loan_debt_management_date_active_to': 'datetime',
        'auction_bid_type': 'int',
        'sales_status': 'int',
        'is_in_repayment': 'bool',
        'page_size': 'int',
        'page_nr': 'int'
    }

    attribute_map = {
        'loan_issued_date_from': 'LoanIssuedDateFrom',
        'loan_issued_date_to': 'LoanIssuedDateTo',
        'principal_min': 'PrincipalMin',
        'principal_max': 'PrincipalMax',
        'interest_min': 'InterestMin',
        'interest_max': 'InterestMax',
        'length_max': 'LengthMax',
        'length_min': 'LengthMin',
        'late_principal_amount_min': 'LatePrincipalAmountMin',
        'late_principal_amount_max': 'LatePrincipalAmountMax',
        'debt_occured_on_from': 'DebtOccuredOnFrom',
        'debt_occured_on_to': 'DebtOccuredOnTo',
        'debt_occured_on_for_secondary_from': 'DebtOccuredOnForSecondaryFrom',
        'debt_occured_on_for_secondary_to': 'DebtOccuredOnForSecondaryTo',
        'defaulted_date_from': 'DefaultedDateFrom',
        'defaulted_date_to': 'DefaultedDateTo',
        'rescheduled_from': 'RescheduledFrom',
        'rescheduled_to': 'RescheduledTo',
        'sold_date_from': 'SoldDateFrom',
        'sold_date_to': 'SoldDateTo',
        'purchase_date_from': 'PurchaseDateFrom',
        'purchase_date_to': 'PurchaseDateTo',
        'next_payment_date_to': 'NextPaymentDateTo',
        'next_payment_date_from': 'NextPaymentDateFrom',
        'last_payment_date_from': 'LastPaymentDateFrom',
        'last_payment_date_to': 'LastPaymentDateTo',
        'countries': 'Countries',
        'ratings': 'Ratings',
        'credit_score_min': 'CreditScoreMin',
        'credit_score_max': 'CreditScoreMax',
        'user_name': 'UserName',
        'loan_status_code': 'LoanStatusCode',
        'income_verification_status': 'IncomeVerificationStatus',
        'loan_debt_management_stage': 'LoanDebtManagementStage',
        'loan_debt_management_stage_type': 'LoanDebtManagementStageType',
        'loan_debt_management_date_active_from': 'LoanDebtManagementDateActiveFrom',
        'loan_debt_management_date_active_to': 'LoanDebtManagementDateActiveTo',
        'auction_bid_type': 'AuctionBidType',
        'sales_status': 'SalesStatus',
        'is_in_repayment': 'IsInRepayment',
        'page_size': 'PageSize',
        'page_nr': 'PageNr'
    }

    def __init__(self, loan_issued_date_from=None, loan_issued_date_to=None, principal_min=None, principal_max=None, interest_min=None, interest_max=None, length_max=None, length_min=None, late_principal_amount_min=None, late_principal_amount_max=None, debt_occured_on_from=None, debt_occured_on_to=None, debt_occured_on_for_secondary_from=None, debt_occured_on_for_secondary_to=None, defaulted_date_from=None, defaulted_date_to=None, rescheduled_from=None, rescheduled_to=None, sold_date_from=None, sold_date_to=None, purchase_date_from=None, purchase_date_to=None, next_payment_date_to=None, next_payment_date_from=None, last_payment_date_from=None, last_payment_date_to=None, countries=None, ratings=None, credit_score_min=None, credit_score_max=None, user_name=None, loan_status_code=None, income_verification_status=None, loan_debt_management_stage=None, loan_debt_management_stage_type=None, loan_debt_management_date_active_from=None, loan_debt_management_date_active_to=None, auction_bid_type=None, sales_status=None, is_in_repayment=None, page_size=None, page_nr=None):  # noqa: E501
        """MyInvestmentsRequest - a model defined in Swagger"""  # noqa: E501

        self._loan_issued_date_from = None
        self._loan_issued_date_to = None
        self._principal_min = None
        self._principal_max = None
        self._interest_min = None
        self._interest_max = None
        self._length_max = None
        self._length_min = None
        self._late_principal_amount_min = None
        self._late_principal_amount_max = None
        self._debt_occured_on_from = None
        self._debt_occured_on_to = None
        self._debt_occured_on_for_secondary_from = None
        self._debt_occured_on_for_secondary_to = None
        self._defaulted_date_from = None
        self._defaulted_date_to = None
        self._rescheduled_from = None
        self._rescheduled_to = None
        self._sold_date_from = None
        self._sold_date_to = None
        self._purchase_date_from = None
        self._purchase_date_to = None
        self._next_payment_date_to = None
        self._next_payment_date_from = None
        self._last_payment_date_from = None
        self._last_payment_date_to = None
        self._countries = None
        self._ratings = None
        self._credit_score_min = None
        self._credit_score_max = None
        self._user_name = None
        self._loan_status_code = None
        self._income_verification_status = None
        self._loan_debt_management_stage = None
        self._loan_debt_management_stage_type = None
        self._loan_debt_management_date_active_from = None
        self._loan_debt_management_date_active_to = None
        self._auction_bid_type = None
        self._sales_status = None
        self._is_in_repayment = None
        self._page_size = None
        self._page_nr = None
        self.discriminator = None

        if loan_issued_date_from is not None:
            self.loan_issued_date_from = loan_issued_date_from
        if loan_issued_date_to is not None:
            self.loan_issued_date_to = loan_issued_date_to
        if principal_min is not None:
            self.principal_min = principal_min
        if principal_max is not None:
            self.principal_max = principal_max
        if interest_min is not None:
            self.interest_min = interest_min
        if interest_max is not None:
            self.interest_max = interest_max
        if length_max is not None:
            self.length_max = length_max
        if length_min is not None:
            self.length_min = length_min
        if late_principal_amount_min is not None:
            self.late_principal_amount_min = late_principal_amount_min
        if late_principal_amount_max is not None:
            self.late_principal_amount_max = late_principal_amount_max
        if debt_occured_on_from is not None:
            self.debt_occured_on_from = debt_occured_on_from
        if debt_occured_on_to is not None:
            self.debt_occured_on_to = debt_occured_on_to
        if debt_occured_on_for_secondary_from is not None:
            self.debt_occured_on_for_secondary_from = debt_occured_on_for_secondary_from
        if debt_occured_on_for_secondary_to is not None:
            self.debt_occured_on_for_secondary_to = debt_occured_on_for_secondary_to
        if defaulted_date_from is not None:
            self.defaulted_date_from = defaulted_date_from
        if defaulted_date_to is not None:
            self.defaulted_date_to = defaulted_date_to
        if rescheduled_from is not None:
            self.rescheduled_from = rescheduled_from
        if rescheduled_to is not None:
            self.rescheduled_to = rescheduled_to
        if sold_date_from is not None:
            self.sold_date_from = sold_date_from
        if sold_date_to is not None:
            self.sold_date_to = sold_date_to
        if purchase_date_from is not None:
            self.purchase_date_from = purchase_date_from
        if purchase_date_to is not None:
            self.purchase_date_to = purchase_date_to
        if next_payment_date_to is not None:
            self.next_payment_date_to = next_payment_date_to
        if next_payment_date_from is not None:
            self.next_payment_date_from = next_payment_date_from
        if last_payment_date_from is not None:
            self.last_payment_date_from = last_payment_date_from
        if last_payment_date_to is not None:
            self.last_payment_date_to = last_payment_date_to
        if countries is not None:
            self.countries = countries
        if ratings is not None:
            self.ratings = ratings
        if credit_score_min is not None:
            self.credit_score_min = credit_score_min
        if credit_score_max is not None:
            self.credit_score_max = credit_score_max
        if user_name is not None:
            self.user_name = user_name
        if loan_status_code is not None:
            self.loan_status_code = loan_status_code
        if income_verification_status is not None:
            self.income_verification_status = income_verification_status
        if loan_debt_management_stage is not None:
            self.loan_debt_management_stage = loan_debt_management_stage
        if loan_debt_management_stage_type is not None:
            self.loan_debt_management_stage_type = loan_debt_management_stage_type
        if loan_debt_management_date_active_from is not None:
            self.loan_debt_management_date_active_from = loan_debt_management_date_active_from
        if loan_debt_management_date_active_to is not None:
            self.loan_debt_management_date_active_to = loan_debt_management_date_active_to
        if auction_bid_type is not None:
            self.auction_bid_type = auction_bid_type
        if sales_status is not None:
            self.sales_status = sales_status
        if is_in_repayment is not None:
            self.is_in_repayment = is_in_repayment
        if page_size is not None:
            self.page_size = page_size
        if page_nr is not None:
            self.page_nr = page_nr

    @property
    def loan_issued_date_from(self):
        """Gets the loan_issued_date_from of this MyInvestmentsRequest.  # noqa: E501

        Loan issued start date from  # noqa: E501

        :return: The loan_issued_date_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._loan_issued_date_from

    @loan_issued_date_from.setter
    def loan_issued_date_from(self, loan_issued_date_from):
        """Sets the loan_issued_date_from of this MyInvestmentsRequest.

        Loan issued start date from  # noqa: E501

        :param loan_issued_date_from: The loan_issued_date_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._loan_issued_date_from = loan_issued_date_from

    @property
    def loan_issued_date_to(self):
        """Gets the loan_issued_date_to of this MyInvestmentsRequest.  # noqa: E501

        Loan issued start date to  # noqa: E501

        :return: The loan_issued_date_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._loan_issued_date_to

    @loan_issued_date_to.setter
    def loan_issued_date_to(self, loan_issued_date_to):
        """Sets the loan_issued_date_to of this MyInvestmentsRequest.

        Loan issued start date to  # noqa: E501

        :param loan_issued_date_to: The loan_issued_date_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._loan_issued_date_to = loan_issued_date_to

    @property
    def principal_min(self):
        """Gets the principal_min of this MyInvestmentsRequest.  # noqa: E501

        Remaining principal amount min  # noqa: E501

        :return: The principal_min of this MyInvestmentsRequest.  # noqa: E501
        :rtype: float
        """
        return self._principal_min

    @principal_min.setter
    def principal_min(self, principal_min):
        """Sets the principal_min of this MyInvestmentsRequest.

        Remaining principal amount min  # noqa: E501

        :param principal_min: The principal_min of this MyInvestmentsRequest.  # noqa: E501
        :type: float
        """

        self._principal_min = principal_min

    @property
    def principal_max(self):
        """Gets the principal_max of this MyInvestmentsRequest.  # noqa: E501

        Remaining principal amount max  # noqa: E501

        :return: The principal_max of this MyInvestmentsRequest.  # noqa: E501
        :rtype: float
        """
        return self._principal_max

    @principal_max.setter
    def principal_max(self, principal_max):
        """Sets the principal_max of this MyInvestmentsRequest.

        Remaining principal amount max  # noqa: E501

        :param principal_max: The principal_max of this MyInvestmentsRequest.  # noqa: E501
        :type: float
        """

        self._principal_max = principal_max

    @property
    def interest_min(self):
        """Gets the interest_min of this MyInvestmentsRequest.  # noqa: E501

        Interest rate min  # noqa: E501

        :return: The interest_min of this MyInvestmentsRequest.  # noqa: E501
        :rtype: float
        """
        return self._interest_min

    @interest_min.setter
    def interest_min(self, interest_min):
        """Sets the interest_min of this MyInvestmentsRequest.

        Interest rate min  # noqa: E501

        :param interest_min: The interest_min of this MyInvestmentsRequest.  # noqa: E501
        :type: float
        """

        self._interest_min = interest_min

    @property
    def interest_max(self):
        """Gets the interest_max of this MyInvestmentsRequest.  # noqa: E501

        Interest rate max  # noqa: E501

        :return: The interest_max of this MyInvestmentsRequest.  # noqa: E501
        :rtype: float
        """
        return self._interest_max

    @interest_max.setter
    def interest_max(self, interest_max):
        """Sets the interest_max of this MyInvestmentsRequest.

        Interest rate max  # noqa: E501

        :param interest_max: The interest_max of this MyInvestmentsRequest.  # noqa: E501
        :type: float
        """

        self._interest_max = interest_max

    @property
    def length_max(self):
        """Gets the length_max of this MyInvestmentsRequest.  # noqa: E501

        Loan lenght min  # noqa: E501

        :return: The length_max of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._length_max

    @length_max.setter
    def length_max(self, length_max):
        """Sets the length_max of this MyInvestmentsRequest.

        Loan lenght min  # noqa: E501

        :param length_max: The length_max of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """

        self._length_max = length_max

    @property
    def length_min(self):
        """Gets the length_min of this MyInvestmentsRequest.  # noqa: E501

        Loan lenght max  # noqa: E501

        :return: The length_min of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._length_min

    @length_min.setter
    def length_min(self, length_min):
        """Sets the length_min of this MyInvestmentsRequest.

        Loan lenght max  # noqa: E501

        :param length_min: The length_min of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """

        self._length_min = length_min

    @property
    def late_principal_amount_min(self):
        """Gets the late_principal_amount_min of this MyInvestmentsRequest.  # noqa: E501

        Principal debt amount min  # noqa: E501

        :return: The late_principal_amount_min of this MyInvestmentsRequest.  # noqa: E501
        :rtype: float
        """
        return self._late_principal_amount_min

    @late_principal_amount_min.setter
    def late_principal_amount_min(self, late_principal_amount_min):
        """Sets the late_principal_amount_min of this MyInvestmentsRequest.

        Principal debt amount min  # noqa: E501

        :param late_principal_amount_min: The late_principal_amount_min of this MyInvestmentsRequest.  # noqa: E501
        :type: float
        """

        self._late_principal_amount_min = late_principal_amount_min

    @property
    def late_principal_amount_max(self):
        """Gets the late_principal_amount_max of this MyInvestmentsRequest.  # noqa: E501

        Principal debt amount max  # noqa: E501

        :return: The late_principal_amount_max of this MyInvestmentsRequest.  # noqa: E501
        :rtype: float
        """
        return self._late_principal_amount_max

    @late_principal_amount_max.setter
    def late_principal_amount_max(self, late_principal_amount_max):
        """Sets the late_principal_amount_max of this MyInvestmentsRequest.

        Principal debt amount max  # noqa: E501

        :param late_principal_amount_max: The late_principal_amount_max of this MyInvestmentsRequest.  # noqa: E501
        :type: float
        """

        self._late_principal_amount_max = late_principal_amount_max

    @property
    def debt_occured_on_from(self):
        """Gets the debt_occured_on_from of this MyInvestmentsRequest.  # noqa: E501

        Principal debt started date from  # noqa: E501

        :return: The debt_occured_on_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._debt_occured_on_from

    @debt_occured_on_from.setter
    def debt_occured_on_from(self, debt_occured_on_from):
        """Sets the debt_occured_on_from of this MyInvestmentsRequest.

        Principal debt started date from  # noqa: E501

        :param debt_occured_on_from: The debt_occured_on_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._debt_occured_on_from = debt_occured_on_from

    @property
    def debt_occured_on_to(self):
        """Gets the debt_occured_on_to of this MyInvestmentsRequest.  # noqa: E501

        Principal debt started date to  # noqa: E501

        :return: The debt_occured_on_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._debt_occured_on_to

    @debt_occured_on_to.setter
    def debt_occured_on_to(self, debt_occured_on_to):
        """Sets the debt_occured_on_to of this MyInvestmentsRequest.

        Principal debt started date to  # noqa: E501

        :param debt_occured_on_to: The debt_occured_on_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._debt_occured_on_to = debt_occured_on_to

    @property
    def debt_occured_on_for_secondary_from(self):
        """Gets the debt_occured_on_for_secondary_from of this MyInvestmentsRequest.  # noqa: E501

        Interest debt started date from  # noqa: E501

        :return: The debt_occured_on_for_secondary_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary_from

    @debt_occured_on_for_secondary_from.setter
    def debt_occured_on_for_secondary_from(self, debt_occured_on_for_secondary_from):
        """Sets the debt_occured_on_for_secondary_from of this MyInvestmentsRequest.

        Interest debt started date from  # noqa: E501

        :param debt_occured_on_for_secondary_from: The debt_occured_on_for_secondary_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._debt_occured_on_for_secondary_from = debt_occured_on_for_secondary_from

    @property
    def debt_occured_on_for_secondary_to(self):
        """Gets the debt_occured_on_for_secondary_to of this MyInvestmentsRequest.  # noqa: E501

        Interest debt started date to  # noqa: E501

        :return: The debt_occured_on_for_secondary_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary_to

    @debt_occured_on_for_secondary_to.setter
    def debt_occured_on_for_secondary_to(self, debt_occured_on_for_secondary_to):
        """Sets the debt_occured_on_for_secondary_to of this MyInvestmentsRequest.

        Interest debt started date to  # noqa: E501

        :param debt_occured_on_for_secondary_to: The debt_occured_on_for_secondary_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._debt_occured_on_for_secondary_to = debt_occured_on_for_secondary_to

    @property
    def defaulted_date_from(self):
        """Gets the defaulted_date_from of this MyInvestmentsRequest.  # noqa: E501

        Defaulted date from  # noqa: E501

        :return: The defaulted_date_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._defaulted_date_from

    @defaulted_date_from.setter
    def defaulted_date_from(self, defaulted_date_from):
        """Sets the defaulted_date_from of this MyInvestmentsRequest.

        Defaulted date from  # noqa: E501

        :param defaulted_date_from: The defaulted_date_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._defaulted_date_from = defaulted_date_from

    @property
    def defaulted_date_to(self):
        """Gets the defaulted_date_to of this MyInvestmentsRequest.  # noqa: E501

        Defaulted date to  # noqa: E501

        :return: The defaulted_date_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._defaulted_date_to

    @defaulted_date_to.setter
    def defaulted_date_to(self, defaulted_date_to):
        """Sets the defaulted_date_to of this MyInvestmentsRequest.

        Defaulted date to  # noqa: E501

        :param defaulted_date_to: The defaulted_date_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._defaulted_date_to = defaulted_date_to

    @property
    def rescheduled_from(self):
        """Gets the rescheduled_from of this MyInvestmentsRequest.  # noqa: E501

        Defaulted date from  # noqa: E501

        :return: The rescheduled_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._rescheduled_from

    @rescheduled_from.setter
    def rescheduled_from(self, rescheduled_from):
        """Sets the rescheduled_from of this MyInvestmentsRequest.

        Defaulted date from  # noqa: E501

        :param rescheduled_from: The rescheduled_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._rescheduled_from = rescheduled_from

    @property
    def rescheduled_to(self):
        """Gets the rescheduled_to of this MyInvestmentsRequest.  # noqa: E501

        Defaulted date to  # noqa: E501

        :return: The rescheduled_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._rescheduled_to

    @rescheduled_to.setter
    def rescheduled_to(self, rescheduled_to):
        """Sets the rescheduled_to of this MyInvestmentsRequest.

        Defaulted date to  # noqa: E501

        :param rescheduled_to: The rescheduled_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._rescheduled_to = rescheduled_to

    @property
    def sold_date_from(self):
        """Gets the sold_date_from of this MyInvestmentsRequest.  # noqa: E501

        When it was sold on Secondary market from  # noqa: E501

        :return: The sold_date_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._sold_date_from

    @sold_date_from.setter
    def sold_date_from(self, sold_date_from):
        """Sets the sold_date_from of this MyInvestmentsRequest.

        When it was sold on Secondary market from  # noqa: E501

        :param sold_date_from: The sold_date_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._sold_date_from = sold_date_from

    @property
    def sold_date_to(self):
        """Gets the sold_date_to of this MyInvestmentsRequest.  # noqa: E501

        When it was sold on Secondary market to  # noqa: E501

        :return: The sold_date_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._sold_date_to

    @sold_date_to.setter
    def sold_date_to(self, sold_date_to):
        """Sets the sold_date_to of this MyInvestmentsRequest.

        When it was sold on Secondary market to  # noqa: E501

        :param sold_date_to: The sold_date_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._sold_date_to = sold_date_to

    @property
    def purchase_date_from(self):
        """Gets the purchase_date_from of this MyInvestmentsRequest.  # noqa: E501

        When you received the investment Auctions/Secondary market from  # noqa: E501

        :return: The purchase_date_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._purchase_date_from

    @purchase_date_from.setter
    def purchase_date_from(self, purchase_date_from):
        """Sets the purchase_date_from of this MyInvestmentsRequest.

        When you received the investment Auctions/Secondary market from  # noqa: E501

        :param purchase_date_from: The purchase_date_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._purchase_date_from = purchase_date_from

    @property
    def purchase_date_to(self):
        """Gets the purchase_date_to of this MyInvestmentsRequest.  # noqa: E501

        When you received the investment Auctions/Secondary market to  # noqa: E501

        :return: The purchase_date_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._purchase_date_to

    @purchase_date_to.setter
    def purchase_date_to(self, purchase_date_to):
        """Sets the purchase_date_to of this MyInvestmentsRequest.

        When you received the investment Auctions/Secondary market to  # noqa: E501

        :param purchase_date_to: The purchase_date_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._purchase_date_to = purchase_date_to

    @property
    def next_payment_date_to(self):
        """Gets the next_payment_date_to of this MyInvestmentsRequest.  # noqa: E501

        Next payment date to  # noqa: E501

        :return: The next_payment_date_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._next_payment_date_to

    @next_payment_date_to.setter
    def next_payment_date_to(self, next_payment_date_to):
        """Sets the next_payment_date_to of this MyInvestmentsRequest.

        Next payment date to  # noqa: E501

        :param next_payment_date_to: The next_payment_date_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._next_payment_date_to = next_payment_date_to

    @property
    def next_payment_date_from(self):
        """Gets the next_payment_date_from of this MyInvestmentsRequest.  # noqa: E501

        Next payment date from  # noqa: E501

        :return: The next_payment_date_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._next_payment_date_from

    @next_payment_date_from.setter
    def next_payment_date_from(self, next_payment_date_from):
        """Sets the next_payment_date_from of this MyInvestmentsRequest.

        Next payment date from  # noqa: E501

        :param next_payment_date_from: The next_payment_date_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._next_payment_date_from = next_payment_date_from

    @property
    def last_payment_date_from(self):
        """Gets the last_payment_date_from of this MyInvestmentsRequest.  # noqa: E501

        Last payment date from  # noqa: E501

        :return: The last_payment_date_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._last_payment_date_from

    @last_payment_date_from.setter
    def last_payment_date_from(self, last_payment_date_from):
        """Sets the last_payment_date_from of this MyInvestmentsRequest.

        Last payment date from  # noqa: E501

        :param last_payment_date_from: The last_payment_date_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._last_payment_date_from = last_payment_date_from

    @property
    def last_payment_date_to(self):
        """Gets the last_payment_date_to of this MyInvestmentsRequest.  # noqa: E501

        Last payment date to  # noqa: E501

        :return: The last_payment_date_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._last_payment_date_to

    @last_payment_date_to.setter
    def last_payment_date_to(self, last_payment_date_to):
        """Sets the last_payment_date_to of this MyInvestmentsRequest.

        Last payment date to  # noqa: E501

        :param last_payment_date_to: The last_payment_date_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._last_payment_date_to = last_payment_date_to

    @property
    def countries(self):
        """Gets the countries of this MyInvestmentsRequest.  # noqa: E501

        Two letter iso code for country of origin: EE, ES, FI  # noqa: E501

        :return: The countries of this MyInvestmentsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this MyInvestmentsRequest.

        Two letter iso code for country of origin: EE, ES, FI  # noqa: E501

        :param countries: The countries of this MyInvestmentsRequest.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def ratings(self):
        """Gets the ratings of this MyInvestmentsRequest.  # noqa: E501

        Bondora's rating: AA, A, B, C, D, E, F, HR  # noqa: E501

        :return: The ratings of this MyInvestmentsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this MyInvestmentsRequest.

        Bondora's rating: AA, A, B, C, D, E, F, HR  # noqa: E501

        :param ratings: The ratings of this MyInvestmentsRequest.  # noqa: E501
        :type: list[str]
        """

        self._ratings = ratings

    @property
    def credit_score_min(self):
        """Gets the credit_score_min of this MyInvestmentsRequest.  # noqa: E501

        Minimum credit score  # noqa: E501

        :return: The credit_score_min of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._credit_score_min

    @credit_score_min.setter
    def credit_score_min(self, credit_score_min):
        """Sets the credit_score_min of this MyInvestmentsRequest.

        Minimum credit score  # noqa: E501

        :param credit_score_min: The credit_score_min of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """

        self._credit_score_min = credit_score_min

    @property
    def credit_score_max(self):
        """Gets the credit_score_max of this MyInvestmentsRequest.  # noqa: E501

        Maximum credit score  # noqa: E501

        :return: The credit_score_max of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._credit_score_max

    @credit_score_max.setter
    def credit_score_max(self, credit_score_max):
        """Sets the credit_score_max of this MyInvestmentsRequest.

        Maximum credit score  # noqa: E501

        :param credit_score_max: The credit_score_max of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """

        self._credit_score_max = credit_score_max

    @property
    def user_name(self):
        """Gets the user_name of this MyInvestmentsRequest.  # noqa: E501

        Borrower's username  # noqa: E501

        :return: The user_name of this MyInvestmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this MyInvestmentsRequest.

        Borrower's username  # noqa: E501

        :param user_name: The user_name of this MyInvestmentsRequest.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def loan_status_code(self):
        """Gets the loan_status_code of this MyInvestmentsRequest.  # noqa: E501

        Loan status code              <para>0 Reserved</para><para>2 Current</para><para>3 Cancelled</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>  # noqa: E501

        :return: The loan_status_code of this MyInvestmentsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._loan_status_code

    @loan_status_code.setter
    def loan_status_code(self, loan_status_code):
        """Sets the loan_status_code of this MyInvestmentsRequest.

        Loan status code              <para>0 Reserved</para><para>2 Current</para><para>3 Cancelled</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>  # noqa: E501

        :param loan_status_code: The loan_status_code of this MyInvestmentsRequest.  # noqa: E501
        :type: list[int]
        """

        self._loan_status_code = loan_status_code

    @property
    def income_verification_status(self):
        """Gets the income_verification_status of this MyInvestmentsRequest.  # noqa: E501

        Income verification type  # noqa: E501

        :return: The income_verification_status of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._income_verification_status

    @income_verification_status.setter
    def income_verification_status(self, income_verification_status):
        """Sets the income_verification_status of this MyInvestmentsRequest.

        Income verification type  # noqa: E501

        :param income_verification_status: The income_verification_status of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if income_verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `income_verification_status` ({0}), must be one of {1}"  # noqa: E501
                .format(income_verification_status, allowed_values)
            )

        self._income_verification_status = income_verification_status

    @property
    def loan_debt_management_stage(self):
        """Gets the loan_debt_management_stage of this MyInvestmentsRequest.  # noqa: E501

        Latest debt management stage  # noqa: E501

        :return: The loan_debt_management_stage of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_debt_management_stage

    @loan_debt_management_stage.setter
    def loan_debt_management_stage(self, loan_debt_management_stage):
        """Sets the loan_debt_management_stage of this MyInvestmentsRequest.

        Latest debt management stage  # noqa: E501

        :param loan_debt_management_stage: The loan_debt_management_stage of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 7, 9, 14, 15, 16, 20, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]  # noqa: E501
        if loan_debt_management_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_debt_management_stage` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_debt_management_stage, allowed_values)
            )

        self._loan_debt_management_stage = loan_debt_management_stage

    @property
    def loan_debt_management_stage_type(self):
        """Gets the loan_debt_management_stage_type of this MyInvestmentsRequest.  # noqa: E501

        Latest debt management stage type  # noqa: E501

        :return: The loan_debt_management_stage_type of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_debt_management_stage_type

    @loan_debt_management_stage_type.setter
    def loan_debt_management_stage_type(self, loan_debt_management_stage_type):
        """Sets the loan_debt_management_stage_type of this MyInvestmentsRequest.

        Latest debt management stage type  # noqa: E501

        :param loan_debt_management_stage_type: The loan_debt_management_stage_type of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, -1]  # noqa: E501
        if loan_debt_management_stage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_debt_management_stage_type` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_debt_management_stage_type, allowed_values)
            )

        self._loan_debt_management_stage_type = loan_debt_management_stage_type

    @property
    def loan_debt_management_date_active_from(self):
        """Gets the loan_debt_management_date_active_from of this MyInvestmentsRequest.  # noqa: E501

        Latest debt management date active from  # noqa: E501

        :return: The loan_debt_management_date_active_from of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._loan_debt_management_date_active_from

    @loan_debt_management_date_active_from.setter
    def loan_debt_management_date_active_from(self, loan_debt_management_date_active_from):
        """Sets the loan_debt_management_date_active_from of this MyInvestmentsRequest.

        Latest debt management date active from  # noqa: E501

        :param loan_debt_management_date_active_from: The loan_debt_management_date_active_from of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._loan_debt_management_date_active_from = loan_debt_management_date_active_from

    @property
    def loan_debt_management_date_active_to(self):
        """Gets the loan_debt_management_date_active_to of this MyInvestmentsRequest.  # noqa: E501

        Latest debt management date active to  # noqa: E501

        :return: The loan_debt_management_date_active_to of this MyInvestmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._loan_debt_management_date_active_to

    @loan_debt_management_date_active_to.setter
    def loan_debt_management_date_active_to(self, loan_debt_management_date_active_to):
        """Sets the loan_debt_management_date_active_to of this MyInvestmentsRequest.

        Latest debt management date active to  # noqa: E501

        :param loan_debt_management_date_active_to: The loan_debt_management_date_active_to of this MyInvestmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._loan_debt_management_date_active_to = loan_debt_management_date_active_to

    @property
    def auction_bid_type(self):
        """Gets the auction_bid_type of this MyInvestmentsRequest.  # noqa: E501

        Auction bid type  # noqa: E501

        :return: The auction_bid_type of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._auction_bid_type

    @auction_bid_type.setter
    def auction_bid_type(self, auction_bid_type):
        """Sets the auction_bid_type of this MyInvestmentsRequest.

        Auction bid type  # noqa: E501

        :param auction_bid_type: The auction_bid_type of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if auction_bid_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auction_bid_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auction_bid_type, allowed_values)
            )

        self._auction_bid_type = auction_bid_type

    @property
    def sales_status(self):
        """Gets the sales_status of this MyInvestmentsRequest.  # noqa: E501

        Second market sale status              <para>NULL All active</para><para>0 Bought investments</para><para>1 Sold investments</para><para>2 Investment is on sale</para><para>3 Investment is not on sale</para>  # noqa: E501

        :return: The sales_status of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._sales_status

    @sales_status.setter
    def sales_status(self, sales_status):
        """Sets the sales_status of this MyInvestmentsRequest.

        Second market sale status              <para>NULL All active</para><para>0 Bought investments</para><para>1 Sold investments</para><para>2 Investment is on sale</para><para>3 Investment is not on sale</para>  # noqa: E501

        :param sales_status: The sales_status of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """

        self._sales_status = sales_status

    @property
    def is_in_repayment(self):
        """Gets the is_in_repayment of this MyInvestmentsRequest.  # noqa: E501

        Search only active in repayment loans, StatusCodes (2, 5, 100)  # noqa: E501

        :return: The is_in_repayment of this MyInvestmentsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_repayment

    @is_in_repayment.setter
    def is_in_repayment(self, is_in_repayment):
        """Sets the is_in_repayment of this MyInvestmentsRequest.

        Search only active in repayment loans, StatusCodes (2, 5, 100)  # noqa: E501

        :param is_in_repayment: The is_in_repayment of this MyInvestmentsRequest.  # noqa: E501
        :type: bool
        """

        self._is_in_repayment = is_in_repayment

    @property
    def page_size(self):
        """Gets the page_size of this MyInvestmentsRequest.  # noqa: E501

        Max items in result, up to 50000  # noqa: E501

        :return: The page_size of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this MyInvestmentsRequest.

        Max items in result, up to 50000  # noqa: E501

        :param page_size: The page_size of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """
        if page_size is not None and page_size > 50000:  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `50000`")  # noqa: E501
        if page_size is not None and page_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_size = page_size

    @property
    def page_nr(self):
        """Gets the page_nr of this MyInvestmentsRequest.  # noqa: E501

        Result page nr  # noqa: E501

        :return: The page_nr of this MyInvestmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """Sets the page_nr of this MyInvestmentsRequest.

        Result page nr  # noqa: E501

        :param page_nr: The page_nr of this MyInvestmentsRequest.  # noqa: E501
        :type: int
        """
        if page_nr is not None and page_nr > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if page_nr is not None and page_nr < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_nr = page_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MyInvestmentsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MyInvestmentsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
