# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuctionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'countries': 'list[str]',
        'ratings': 'list[str]',
        'gender': 'int',
        'sum_min': 'int',
        'sum_max': 'int',
        'terms': 'list[int]',
        'age_min': 'int',
        'age_max': 'int',
        'loan_number': 'int',
        'user_name': 'str',
        'application_date_from': 'datetime',
        'application_date_to': 'datetime',
        'credit_score_min': 'int',
        'credit_score_max': 'int',
        'credit_scores_ee_mini': 'list[str]',
        'interest_min': 'float',
        'interest_max': 'float',
        'income_total_min': 'float',
        'income_total_max': 'float',
        'model_version': 'int',
        'expected_loss_min': 'float',
        'expected_loss_max': 'float',
        'listed_on_utc_from': 'datetime',
        'listed_on_utc_to': 'datetime',
        'page_size': 'int',
        'page_nr': 'int'
    }

    attribute_map = {
        'countries': 'Countries',
        'ratings': 'Ratings',
        'gender': 'Gender',
        'sum_min': 'SumMin',
        'sum_max': 'SumMax',
        'terms': 'Terms',
        'age_min': 'AgeMin',
        'age_max': 'AgeMax',
        'loan_number': 'LoanNumber',
        'user_name': 'UserName',
        'application_date_from': 'ApplicationDateFrom',
        'application_date_to': 'ApplicationDateTo',
        'credit_score_min': 'CreditScoreMin',
        'credit_score_max': 'CreditScoreMax',
        'credit_scores_ee_mini': 'CreditScoresEeMini',
        'interest_min': 'InterestMin',
        'interest_max': 'InterestMax',
        'income_total_min': 'IncomeTotalMin',
        'income_total_max': 'IncomeTotalMax',
        'model_version': 'ModelVersion',
        'expected_loss_min': 'ExpectedLossMin',
        'expected_loss_max': 'ExpectedLossMax',
        'listed_on_utc_from': 'ListedOnUTCFrom',
        'listed_on_utc_to': 'ListedOnUTCTo',
        'page_size': 'PageSize',
        'page_nr': 'PageNr'
    }

    def __init__(self, countries=None, ratings=None, gender=None, sum_min=None, sum_max=None, terms=None, age_min=None, age_max=None, loan_number=None, user_name=None, application_date_from=None, application_date_to=None, credit_score_min=None, credit_score_max=None, credit_scores_ee_mini=None, interest_min=None, interest_max=None, income_total_min=None, income_total_max=None, model_version=None, expected_loss_min=None, expected_loss_max=None, listed_on_utc_from=None, listed_on_utc_to=None, page_size=None, page_nr=None):  # noqa: E501
        """AuctionRequest - a model defined in Swagger"""  # noqa: E501

        self._countries = None
        self._ratings = None
        self._gender = None
        self._sum_min = None
        self._sum_max = None
        self._terms = None
        self._age_min = None
        self._age_max = None
        self._loan_number = None
        self._user_name = None
        self._application_date_from = None
        self._application_date_to = None
        self._credit_score_min = None
        self._credit_score_max = None
        self._credit_scores_ee_mini = None
        self._interest_min = None
        self._interest_max = None
        self._income_total_min = None
        self._income_total_max = None
        self._model_version = None
        self._expected_loss_min = None
        self._expected_loss_max = None
        self._listed_on_utc_from = None
        self._listed_on_utc_to = None
        self._page_size = None
        self._page_nr = None
        self.discriminator = None

        if countries is not None:
            self.countries = countries
        if ratings is not None:
            self.ratings = ratings
        if gender is not None:
            self.gender = gender
        if sum_min is not None:
            self.sum_min = sum_min
        if sum_max is not None:
            self.sum_max = sum_max
        if terms is not None:
            self.terms = terms
        if age_min is not None:
            self.age_min = age_min
        if age_max is not None:
            self.age_max = age_max
        if loan_number is not None:
            self.loan_number = loan_number
        if user_name is not None:
            self.user_name = user_name
        if application_date_from is not None:
            self.application_date_from = application_date_from
        if application_date_to is not None:
            self.application_date_to = application_date_to
        if credit_score_min is not None:
            self.credit_score_min = credit_score_min
        if credit_score_max is not None:
            self.credit_score_max = credit_score_max
        if credit_scores_ee_mini is not None:
            self.credit_scores_ee_mini = credit_scores_ee_mini
        if interest_min is not None:
            self.interest_min = interest_min
        if interest_max is not None:
            self.interest_max = interest_max
        if income_total_min is not None:
            self.income_total_min = income_total_min
        if income_total_max is not None:
            self.income_total_max = income_total_max
        if model_version is not None:
            self.model_version = model_version
        if expected_loss_min is not None:
            self.expected_loss_min = expected_loss_min
        if expected_loss_max is not None:
            self.expected_loss_max = expected_loss_max
        if listed_on_utc_from is not None:
            self.listed_on_utc_from = listed_on_utc_from
        if listed_on_utc_to is not None:
            self.listed_on_utc_to = listed_on_utc_to
        if page_size is not None:
            self.page_size = page_size
        if page_nr is not None:
            self.page_nr = page_nr

    @property
    def countries(self):
        """Gets the countries of this AuctionRequest.  # noqa: E501

        Two letter iso code for country of origin: EE, ES, FI  # noqa: E501

        :return: The countries of this AuctionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this AuctionRequest.

        Two letter iso code for country of origin: EE, ES, FI  # noqa: E501

        :param countries: The countries of this AuctionRequest.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def ratings(self):
        """Gets the ratings of this AuctionRequest.  # noqa: E501

        Bondora's rating: AA, A, B, C, D, E, F, HR  # noqa: E501

        :return: The ratings of this AuctionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this AuctionRequest.

        Bondora's rating: AA, A, B, C, D, E, F, HR  # noqa: E501

        :param ratings: The ratings of this AuctionRequest.  # noqa: E501
        :type: list[str]
        """

        self._ratings = ratings

    @property
    def gender(self):
        """Gets the gender of this AuctionRequest.  # noqa: E501

        Borrower's gender: Male 0, Female 1, Unknown 2  # noqa: E501

        :return: The gender of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this AuctionRequest.

        Borrower's gender: Male 0, Female 1, Unknown 2  # noqa: E501

        :param gender: The gender of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._gender = gender

    @property
    def sum_min(self):
        """Gets the sum_min of this AuctionRequest.  # noqa: E501

        Minimal loan amount  # noqa: E501

        :return: The sum_min of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._sum_min

    @sum_min.setter
    def sum_min(self, sum_min):
        """Sets the sum_min of this AuctionRequest.

        Minimal loan amount  # noqa: E501

        :param sum_min: The sum_min of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._sum_min = sum_min

    @property
    def sum_max(self):
        """Gets the sum_max of this AuctionRequest.  # noqa: E501

        Maximum loan amount  # noqa: E501

        :return: The sum_max of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._sum_max

    @sum_max.setter
    def sum_max(self, sum_max):
        """Sets the sum_max of this AuctionRequest.

        Maximum loan amount  # noqa: E501

        :param sum_max: The sum_max of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._sum_max = sum_max

    @property
    def terms(self):
        """Gets the terms of this AuctionRequest.  # noqa: E501

        Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months  # noqa: E501

        :return: The terms of this AuctionRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this AuctionRequest.

        Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months  # noqa: E501

        :param terms: The terms of this AuctionRequest.  # noqa: E501
        :type: list[int]
        """

        self._terms = terms

    @property
    def age_min(self):
        """Gets the age_min of this AuctionRequest.  # noqa: E501

        Minimal age  # noqa: E501

        :return: The age_min of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._age_min

    @age_min.setter
    def age_min(self, age_min):
        """Sets the age_min of this AuctionRequest.

        Minimal age  # noqa: E501

        :param age_min: The age_min of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._age_min = age_min

    @property
    def age_max(self):
        """Gets the age_max of this AuctionRequest.  # noqa: E501

        Maximum age  # noqa: E501

        :return: The age_max of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._age_max

    @age_max.setter
    def age_max(self, age_max):
        """Sets the age_max of this AuctionRequest.

        Maximum age  # noqa: E501

        :param age_max: The age_max of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._age_max = age_max

    @property
    def loan_number(self):
        """Gets the loan_number of this AuctionRequest.  # noqa: E501

        Loan number  # noqa: E501

        :return: The loan_number of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_number

    @loan_number.setter
    def loan_number(self, loan_number):
        """Sets the loan_number of this AuctionRequest.

        Loan number  # noqa: E501

        :param loan_number: The loan_number of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._loan_number = loan_number

    @property
    def user_name(self):
        """Gets the user_name of this AuctionRequest.  # noqa: E501

        Username  # noqa: E501

        :return: The user_name of this AuctionRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AuctionRequest.

        Username  # noqa: E501

        :param user_name: The user_name of this AuctionRequest.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def application_date_from(self):
        """Gets the application_date_from of this AuctionRequest.  # noqa: E501

        Loan application started date from  # noqa: E501

        :return: The application_date_from of this AuctionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._application_date_from

    @application_date_from.setter
    def application_date_from(self, application_date_from):
        """Sets the application_date_from of this AuctionRequest.

        Loan application started date from  # noqa: E501

        :param application_date_from: The application_date_from of this AuctionRequest.  # noqa: E501
        :type: datetime
        """

        self._application_date_from = application_date_from

    @property
    def application_date_to(self):
        """Gets the application_date_to of this AuctionRequest.  # noqa: E501

        Loan application started date to  # noqa: E501

        :return: The application_date_to of this AuctionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._application_date_to

    @application_date_to.setter
    def application_date_to(self, application_date_to):
        """Sets the application_date_to of this AuctionRequest.

        Loan application started date to  # noqa: E501

        :param application_date_to: The application_date_to of this AuctionRequest.  # noqa: E501
        :type: datetime
        """

        self._application_date_to = application_date_to

    @property
    def credit_score_min(self):
        """Gets the credit_score_min of this AuctionRequest.  # noqa: E501

        Minimum credit score  # noqa: E501

        :return: The credit_score_min of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._credit_score_min

    @credit_score_min.setter
    def credit_score_min(self, credit_score_min):
        """Sets the credit_score_min of this AuctionRequest.

        Minimum credit score  # noqa: E501

        :param credit_score_min: The credit_score_min of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._credit_score_min = credit_score_min

    @property
    def credit_score_max(self):
        """Gets the credit_score_max of this AuctionRequest.  # noqa: E501

        Maximum credit score  # noqa: E501

        :return: The credit_score_max of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._credit_score_max

    @credit_score_max.setter
    def credit_score_max(self, credit_score_max):
        """Sets the credit_score_max of this AuctionRequest.

        Maximum credit score  # noqa: E501

        :param credit_score_max: The credit_score_max of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._credit_score_max = credit_score_max

    @property
    def credit_scores_ee_mini(self):
        """Gets the credit_scores_ee_mini of this AuctionRequest.  # noqa: E501

        Credit score for EE loans  # noqa: E501

        :return: The credit_scores_ee_mini of this AuctionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._credit_scores_ee_mini

    @credit_scores_ee_mini.setter
    def credit_scores_ee_mini(self, credit_scores_ee_mini):
        """Sets the credit_scores_ee_mini of this AuctionRequest.

        Credit score for EE loans  # noqa: E501

        :param credit_scores_ee_mini: The credit_scores_ee_mini of this AuctionRequest.  # noqa: E501
        :type: list[str]
        """

        self._credit_scores_ee_mini = credit_scores_ee_mini

    @property
    def interest_min(self):
        """Gets the interest_min of this AuctionRequest.  # noqa: E501

        Minimum interest  # noqa: E501

        :return: The interest_min of this AuctionRequest.  # noqa: E501
        :rtype: float
        """
        return self._interest_min

    @interest_min.setter
    def interest_min(self, interest_min):
        """Sets the interest_min of this AuctionRequest.

        Minimum interest  # noqa: E501

        :param interest_min: The interest_min of this AuctionRequest.  # noqa: E501
        :type: float
        """

        self._interest_min = interest_min

    @property
    def interest_max(self):
        """Gets the interest_max of this AuctionRequest.  # noqa: E501

        Maximum interest  # noqa: E501

        :return: The interest_max of this AuctionRequest.  # noqa: E501
        :rtype: float
        """
        return self._interest_max

    @interest_max.setter
    def interest_max(self, interest_max):
        """Sets the interest_max of this AuctionRequest.

        Maximum interest  # noqa: E501

        :param interest_max: The interest_max of this AuctionRequest.  # noqa: E501
        :type: float
        """

        self._interest_max = interest_max

    @property
    def income_total_min(self):
        """Gets the income_total_min of this AuctionRequest.  # noqa: E501

        Minimal total income  # noqa: E501

        :return: The income_total_min of this AuctionRequest.  # noqa: E501
        :rtype: float
        """
        return self._income_total_min

    @income_total_min.setter
    def income_total_min(self, income_total_min):
        """Sets the income_total_min of this AuctionRequest.

        Minimal total income  # noqa: E501

        :param income_total_min: The income_total_min of this AuctionRequest.  # noqa: E501
        :type: float
        """

        self._income_total_min = income_total_min

    @property
    def income_total_max(self):
        """Gets the income_total_max of this AuctionRequest.  # noqa: E501

        Maximum total income  # noqa: E501

        :return: The income_total_max of this AuctionRequest.  # noqa: E501
        :rtype: float
        """
        return self._income_total_max

    @income_total_max.setter
    def income_total_max(self, income_total_max):
        """Sets the income_total_max of this AuctionRequest.

        Maximum total income  # noqa: E501

        :param income_total_max: The income_total_max of this AuctionRequest.  # noqa: E501
        :type: float
        """

        self._income_total_max = income_total_max

    @property
    def model_version(self):
        """Gets the model_version of this AuctionRequest.  # noqa: E501

        Model version  # noqa: E501

        :return: The model_version of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this AuctionRequest.

        Model version  # noqa: E501

        :param model_version: The model_version of this AuctionRequest.  # noqa: E501
        :type: int
        """

        self._model_version = model_version

    @property
    def expected_loss_min(self):
        """Gets the expected_loss_min of this AuctionRequest.  # noqa: E501

        Minimal expected loss  # noqa: E501

        :return: The expected_loss_min of this AuctionRequest.  # noqa: E501
        :rtype: float
        """
        return self._expected_loss_min

    @expected_loss_min.setter
    def expected_loss_min(self, expected_loss_min):
        """Sets the expected_loss_min of this AuctionRequest.

        Minimal expected loss  # noqa: E501

        :param expected_loss_min: The expected_loss_min of this AuctionRequest.  # noqa: E501
        :type: float
        """

        self._expected_loss_min = expected_loss_min

    @property
    def expected_loss_max(self):
        """Gets the expected_loss_max of this AuctionRequest.  # noqa: E501

        Maximum expected loss  # noqa: E501

        :return: The expected_loss_max of this AuctionRequest.  # noqa: E501
        :rtype: float
        """
        return self._expected_loss_max

    @expected_loss_max.setter
    def expected_loss_max(self, expected_loss_max):
        """Sets the expected_loss_max of this AuctionRequest.

        Maximum expected loss  # noqa: E501

        :param expected_loss_max: The expected_loss_max of this AuctionRequest.  # noqa: E501
        :type: float
        """

        self._expected_loss_max = expected_loss_max

    @property
    def listed_on_utc_from(self):
        """Gets the listed_on_utc_from of this AuctionRequest.  # noqa: E501

        Date when auction was published from  # noqa: E501

        :return: The listed_on_utc_from of this AuctionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._listed_on_utc_from

    @listed_on_utc_from.setter
    def listed_on_utc_from(self, listed_on_utc_from):
        """Sets the listed_on_utc_from of this AuctionRequest.

        Date when auction was published from  # noqa: E501

        :param listed_on_utc_from: The listed_on_utc_from of this AuctionRequest.  # noqa: E501
        :type: datetime
        """

        self._listed_on_utc_from = listed_on_utc_from

    @property
    def listed_on_utc_to(self):
        """Gets the listed_on_utc_to of this AuctionRequest.  # noqa: E501

        Date when auction was published to  # noqa: E501

        :return: The listed_on_utc_to of this AuctionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._listed_on_utc_to

    @listed_on_utc_to.setter
    def listed_on_utc_to(self, listed_on_utc_to):
        """Sets the listed_on_utc_to of this AuctionRequest.

        Date when auction was published to  # noqa: E501

        :param listed_on_utc_to: The listed_on_utc_to of this AuctionRequest.  # noqa: E501
        :type: datetime
        """

        self._listed_on_utc_to = listed_on_utc_to

    @property
    def page_size(self):
        """Gets the page_size of this AuctionRequest.  # noqa: E501

        Max items in result, up to 20000  # noqa: E501

        :return: The page_size of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AuctionRequest.

        Max items in result, up to 20000  # noqa: E501

        :param page_size: The page_size of this AuctionRequest.  # noqa: E501
        :type: int
        """
        if page_size is not None and page_size > 20000:  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `20000`")  # noqa: E501
        if page_size is not None and page_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_size = page_size

    @property
    def page_nr(self):
        """Gets the page_nr of this AuctionRequest.  # noqa: E501

        Result page nr  # noqa: E501

        :return: The page_nr of this AuctionRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """Sets the page_nr of this AuctionRequest.

        Result page nr  # noqa: E501

        :param page_nr: The page_nr of this AuctionRequest.  # noqa: E501
        :type: int
        """
        if page_nr is not None and page_nr > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if page_nr is not None and page_nr < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_nr = page_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuctionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuctionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
