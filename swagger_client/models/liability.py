# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Liability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_refinanced': 'bool',
        'type_of_liability': 'int',
        'creditor': 'str',
        'monthly_payment': 'float',
        'outstanding': 'float',
        'collateral_type': 'int'
    }

    attribute_map = {
        'is_refinanced': 'IsRefinanced',
        'type_of_liability': 'TypeOfLiability',
        'creditor': 'Creditor',
        'monthly_payment': 'MonthlyPayment',
        'outstanding': 'Outstanding',
        'collateral_type': 'CollateralType'
    }

    def __init__(self, is_refinanced=None, type_of_liability=None, creditor=None, monthly_payment=None, outstanding=None, collateral_type=None):  # noqa: E501
        """Liability - a model defined in Swagger"""  # noqa: E501

        self._is_refinanced = None
        self._type_of_liability = None
        self._creditor = None
        self._monthly_payment = None
        self._outstanding = None
        self._collateral_type = None
        self.discriminator = None

        if is_refinanced is not None:
            self.is_refinanced = is_refinanced
        if type_of_liability is not None:
            self.type_of_liability = type_of_liability
        if creditor is not None:
            self.creditor = creditor
        if monthly_payment is not None:
            self.monthly_payment = monthly_payment
        if outstanding is not None:
            self.outstanding = outstanding
        if collateral_type is not None:
            self.collateral_type = collateral_type

    @property
    def is_refinanced(self):
        """Gets the is_refinanced of this Liability.  # noqa: E501

        Is refinanced              <para>Only Value for new Auctions since 1st of june 2017 is false</para>  # noqa: E501

        :return: The is_refinanced of this Liability.  # noqa: E501
        :rtype: bool
        """
        return self._is_refinanced

    @is_refinanced.setter
    def is_refinanced(self, is_refinanced):
        """Sets the is_refinanced of this Liability.

        Is refinanced              <para>Only Value for new Auctions since 1st of june 2017 is false</para>  # noqa: E501

        :param is_refinanced: The is_refinanced of this Liability.  # noqa: E501
        :type: bool
        """

        self._is_refinanced = is_refinanced

    @property
    def type_of_liability(self):
        """Gets the type_of_liability of this Liability.  # noqa: E501

        Type of liability              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :return: The type_of_liability of this Liability.  # noqa: E501
        :rtype: int
        """
        return self._type_of_liability

    @type_of_liability.setter
    def type_of_liability(self, type_of_liability):
        """Sets the type_of_liability of this Liability.

        Type of liability              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :param type_of_liability: The type_of_liability of this Liability.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 101, 102, 103, 104, 105, 106, 107, -1]  # noqa: E501
        if type_of_liability not in allowed_values:
            raise ValueError(
                "Invalid value for `type_of_liability` ({0}), must be one of {1}"  # noqa: E501
                .format(type_of_liability, allowed_values)
            )

        self._type_of_liability = type_of_liability

    @property
    def creditor(self):
        """Gets the creditor of this Liability.  # noqa: E501

        Creditor  # noqa: E501

        :return: The creditor of this Liability.  # noqa: E501
        :rtype: str
        """
        return self._creditor

    @creditor.setter
    def creditor(self, creditor):
        """Sets the creditor of this Liability.

        Creditor  # noqa: E501

        :param creditor: The creditor of this Liability.  # noqa: E501
        :type: str
        """

        self._creditor = creditor

    @property
    def monthly_payment(self):
        """Gets the monthly_payment of this Liability.  # noqa: E501

        Monthly payment  # noqa: E501

        :return: The monthly_payment of this Liability.  # noqa: E501
        :rtype: float
        """
        return self._monthly_payment

    @monthly_payment.setter
    def monthly_payment(self, monthly_payment):
        """Sets the monthly_payment of this Liability.

        Monthly payment  # noqa: E501

        :param monthly_payment: The monthly_payment of this Liability.  # noqa: E501
        :type: float
        """

        self._monthly_payment = monthly_payment

    @property
    def outstanding(self):
        """Gets the outstanding of this Liability.  # noqa: E501

        Outstanding              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>  # noqa: E501

        :return: The outstanding of this Liability.  # noqa: E501
        :rtype: float
        """
        return self._outstanding

    @outstanding.setter
    def outstanding(self, outstanding):
        """Sets the outstanding of this Liability.

        Outstanding              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>  # noqa: E501

        :param outstanding: The outstanding of this Liability.  # noqa: E501
        :type: float
        """

        self._outstanding = outstanding

    @property
    def collateral_type(self):
        """Gets the collateral_type of this Liability.  # noqa: E501

        Type of collateral              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :return: The collateral_type of this Liability.  # noqa: E501
        :rtype: int
        """
        return self._collateral_type

    @collateral_type.setter
    def collateral_type(self, collateral_type):
        """Sets the collateral_type of this Liability.

        Type of collateral              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :param collateral_type: The collateral_type of this Liability.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, -1]  # noqa: E501
        if collateral_type not in allowed_values:
            raise ValueError(
                "Invalid value for `collateral_type` ({0}), must be one of {1}"  # noqa: E501
                .format(collateral_type, allowed_values)
            )

        self._collateral_type = collateral_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Liability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Liability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
