# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GoGrowAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'net_deposits': 'float',
        'net_profit': 'float',
        'total_saved': 'float'
    }

    attribute_map = {
        'name': 'Name',
        'net_deposits': 'NetDeposits',
        'net_profit': 'NetProfit',
        'total_saved': 'TotalSaved'
    }

    def __init__(self, name=None, net_deposits=None, net_profit=None, total_saved=None):  # noqa: E501
        """GoGrowAccount - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._net_deposits = None
        self._net_profit = None
        self._total_saved = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if net_deposits is not None:
            self.net_deposits = net_deposits
        if net_profit is not None:
            self.net_profit = net_profit
        if total_saved is not None:
            self.total_saved = total_saved

    @property
    def name(self):
        """Gets the name of this GoGrowAccount.  # noqa: E501

        Name of your Go and Grow  # noqa: E501

        :return: The name of this GoGrowAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoGrowAccount.

        Name of your Go and Grow  # noqa: E501

        :param name: The name of this GoGrowAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def net_deposits(self):
        """Gets the net_deposits of this GoGrowAccount.  # noqa: E501

        TotalDeposits - TotalWithdrawals  # noqa: E501

        :return: The net_deposits of this GoGrowAccount.  # noqa: E501
        :rtype: float
        """
        return self._net_deposits

    @net_deposits.setter
    def net_deposits(self, net_deposits):
        """Sets the net_deposits of this GoGrowAccount.

        TotalDeposits - TotalWithdrawals  # noqa: E501

        :param net_deposits: The net_deposits of this GoGrowAccount.  # noqa: E501
        :type: float
        """

        self._net_deposits = net_deposits

    @property
    def net_profit(self):
        """Gets the net_profit of this GoGrowAccount.  # noqa: E501

        Everything you have gained from Go and Grow  # noqa: E501

        :return: The net_profit of this GoGrowAccount.  # noqa: E501
        :rtype: float
        """
        return self._net_profit

    @net_profit.setter
    def net_profit(self, net_profit):
        """Sets the net_profit of this GoGrowAccount.

        Everything you have gained from Go and Grow  # noqa: E501

        :param net_profit: The net_profit of this GoGrowAccount.  # noqa: E501
        :type: float
        """

        self._net_profit = net_profit

    @property
    def total_saved(self):
        """Gets the total_saved of this GoGrowAccount.  # noqa: E501

        Total Go and Grow value  # noqa: E501

        :return: The total_saved of this GoGrowAccount.  # noqa: E501
        :rtype: float
        """
        return self._total_saved

    @total_saved.setter
    def total_saved(self, total_saved):
        """Sets the total_saved of this GoGrowAccount.

        Total Go and Grow value  # noqa: E501

        :param total_saved: The total_saved of this GoGrowAccount.  # noqa: E501
        :type: float
        """

        self._total_saved = total_saved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoGrowAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoGrowAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
