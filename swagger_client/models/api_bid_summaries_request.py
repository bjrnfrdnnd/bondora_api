# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiBidSummariesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bid_status_code': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'page_size': 'int',
        'page_nr': 'int'
    }

    attribute_map = {
        'bid_status_code': 'BidStatusCode',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'page_size': 'PageSize',
        'page_nr': 'PageNr'
    }

    def __init__(self, bid_status_code=None, start_date=None, end_date=None, page_size=None, page_nr=None):  # noqa: E501
        """ApiBidSummariesRequest - a model defined in Swagger"""  # noqa: E501

        self._bid_status_code = None
        self._start_date = None
        self._end_date = None
        self._page_size = None
        self._page_nr = None
        self.discriminator = None

        if bid_status_code is not None:
            self.bid_status_code = bid_status_code
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if page_size is not None:
            self.page_size = page_size
        if page_nr is not None:
            self.page_nr = page_nr

    @property
    def bid_status_code(self):
        """Gets the bid_status_code of this ApiBidSummariesRequest.  # noqa: E501

        Bid status code  # noqa: E501

        :return: The bid_status_code of this ApiBidSummariesRequest.  # noqa: E501
        :rtype: int
        """
        return self._bid_status_code

    @bid_status_code.setter
    def bid_status_code(self, bid_status_code):
        """Sets the bid_status_code of this ApiBidSummariesRequest.

        Bid status code  # noqa: E501

        :param bid_status_code: The bid_status_code of this ApiBidSummariesRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if bid_status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `bid_status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(bid_status_code, allowed_values)
            )

        self._bid_status_code = bid_status_code

    @property
    def start_date(self):
        """Gets the start_date of this ApiBidSummariesRequest.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this ApiBidSummariesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ApiBidSummariesRequest.

        Start date  # noqa: E501

        :param start_date: The start_date of this ApiBidSummariesRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ApiBidSummariesRequest.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this ApiBidSummariesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ApiBidSummariesRequest.

        End date  # noqa: E501

        :param end_date: The end_date of this ApiBidSummariesRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def page_size(self):
        """Gets the page_size of this ApiBidSummariesRequest.  # noqa: E501

        Max items in result, up to 20000  # noqa: E501

        :return: The page_size of this ApiBidSummariesRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ApiBidSummariesRequest.

        Max items in result, up to 20000  # noqa: E501

        :param page_size: The page_size of this ApiBidSummariesRequest.  # noqa: E501
        :type: int
        """
        if page_size is not None and page_size > 20000:  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `20000`")  # noqa: E501
        if page_size is not None and page_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_size = page_size

    @property
    def page_nr(self):
        """Gets the page_nr of this ApiBidSummariesRequest.  # noqa: E501

        Result page nr  # noqa: E501

        :return: The page_nr of this ApiBidSummariesRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """Sets the page_nr of this ApiBidSummariesRequest.

        Result page nr  # noqa: E501

        :param page_nr: The page_nr of this ApiBidSummariesRequest.  # noqa: E501
        :type: int
        """
        if page_nr is not None and page_nr > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if page_nr is not None and page_nr < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_nr = page_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiBidSummariesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiBidSummariesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
