# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuctionExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'liabilities': 'list[Liability]',
        'debts': 'list[Debt]',
        'borrower_history': 'BorrowerHistory',
        'loan_id': 'str',
        'auction_id': 'str',
        'loan_number': 'int',
        'user_name': 'str',
        'new_credit_customer': 'int',
        'loan_application_started_date': 'datetime',
        'planned_close_date': 'datetime',
        'application_signed_hour': 'int',
        'application_signed_weekday': 'int',
        'verification_type': 'int',
        'language_code': 'int',
        'age': 'int',
        'date_of_birth': 'datetime',
        'gender': 'int',
        'country': 'str',
        'credit_score_es_micro_l': 'str',
        'credit_score_es_equifax_risk': 'str',
        'credit_score_fi_asiakas_tieto_risk_grade': 'str',
        'credit_score_ee_mini': 'str',
        'applied_amount': 'float',
        'interest': 'float',
        'loan_duration': 'int',
        'county': 'str',
        'city': 'str',
        'education': 'int',
        'employment_duration_current_employer': 'str',
        'home_ownership_type': 'int',
        'income_total': 'float',
        'monthly_payment': 'float',
        'monthly_payment_day': 'int',
        'model_version': 'int',
        'expected_loss': 'float',
        'rating': 'str',
        'loss_given_default': 'float',
        'probability_of_default': 'float',
        'expected_return_alpha': 'float',
        'liabilities_total': 'float',
        'listed_on_utc': 'datetime',
        'actual_close_date': 'datetime',
        'winning_bids_amount': 'float',
        'remaining_amount': 'float',
        'user_bids': 'int',
        'user_bid_amount': 'float',
        'fullfilled': 'float',
        'credit_score': 'int',
        'scoring_date': 'datetime',
        'use_of_loan': 'int',
        'marital_status': 'int',
        'nr_of_dependants': 'str',
        'employment_status': 'int',
        'employment_position': 'str',
        'work_experience': 'str',
        'occupation_area': 'int',
        'income_from_principal_employer': 'float',
        'income_from_pension': 'float',
        'income_from_family_allowance': 'float',
        'income_from_social_welfare': 'float',
        'income_from_leave_pay': 'float',
        'income_from_child_support': 'float',
        'income_other': 'float',
        'free_cash': 'float',
        'debt_to_income': 'float',
        'ead_rate': 'float',
        'maturity_factor': 'float',
        'interest_rate_alpha': 'float'
    }

    attribute_map = {
        'liabilities': 'Liabilities',
        'debts': 'Debts',
        'borrower_history': 'BorrowerHistory',
        'loan_id': 'LoanId',
        'auction_id': 'AuctionId',
        'loan_number': 'LoanNumber',
        'user_name': 'UserName',
        'new_credit_customer': 'NewCreditCustomer',
        'loan_application_started_date': 'LoanApplicationStartedDate',
        'planned_close_date': 'PlannedCloseDate',
        'application_signed_hour': 'ApplicationSignedHour',
        'application_signed_weekday': 'ApplicationSignedWeekday',
        'verification_type': 'VerificationType',
        'language_code': 'LanguageCode',
        'age': 'Age',
        'date_of_birth': 'DateOfBirth',
        'gender': 'Gender',
        'country': 'Country',
        'credit_score_es_micro_l': 'CreditScoreEsMicroL',
        'credit_score_es_equifax_risk': 'CreditScoreEsEquifaxRisk',
        'credit_score_fi_asiakas_tieto_risk_grade': 'CreditScoreFiAsiakasTietoRiskGrade',
        'credit_score_ee_mini': 'CreditScoreEeMini',
        'applied_amount': 'AppliedAmount',
        'interest': 'Interest',
        'loan_duration': 'LoanDuration',
        'county': 'County',
        'city': 'City',
        'education': 'Education',
        'employment_duration_current_employer': 'EmploymentDurationCurrentEmployer',
        'home_ownership_type': 'HomeOwnershipType',
        'income_total': 'IncomeTotal',
        'monthly_payment': 'MonthlyPayment',
        'monthly_payment_day': 'MonthlyPaymentDay',
        'model_version': 'ModelVersion',
        'expected_loss': 'ExpectedLoss',
        'rating': 'Rating',
        'loss_given_default': 'LossGivenDefault',
        'probability_of_default': 'ProbabilityOfDefault',
        'expected_return_alpha': 'ExpectedReturnAlpha',
        'liabilities_total': 'LiabilitiesTotal',
        'listed_on_utc': 'ListedOnUTC',
        'actual_close_date': 'ActualCloseDate',
        'winning_bids_amount': 'WinningBidsAmount',
        'remaining_amount': 'RemainingAmount',
        'user_bids': 'UserBids',
        'user_bid_amount': 'UserBidAmount',
        'fullfilled': 'Fullfilled',
        'credit_score': 'CreditScore',
        'scoring_date': 'ScoringDate',
        'use_of_loan': 'UseOfLoan',
        'marital_status': 'MaritalStatus',
        'nr_of_dependants': 'NrOfDependants',
        'employment_status': 'EmploymentStatus',
        'employment_position': 'EmploymentPosition',
        'work_experience': 'WorkExperience',
        'occupation_area': 'OccupationArea',
        'income_from_principal_employer': 'IncomeFromPrincipalEmployer',
        'income_from_pension': 'IncomeFromPension',
        'income_from_family_allowance': 'IncomeFromFamilyAllowance',
        'income_from_social_welfare': 'IncomeFromSocialWelfare',
        'income_from_leave_pay': 'IncomeFromLeavePay',
        'income_from_child_support': 'IncomeFromChildSupport',
        'income_other': 'IncomeOther',
        'free_cash': 'FreeCash',
        'debt_to_income': 'DebtToIncome',
        'ead_rate': 'EADRate',
        'maturity_factor': 'MaturityFactor',
        'interest_rate_alpha': 'InterestRateAlpha'
    }

    def __init__(self, liabilities=None, debts=None, borrower_history=None, loan_id=None, auction_id=None, loan_number=None, user_name=None, new_credit_customer=None, loan_application_started_date=None, planned_close_date=None, application_signed_hour=None, application_signed_weekday=None, verification_type=None, language_code=None, age=None, date_of_birth=None, gender=None, country=None, credit_score_es_micro_l=None, credit_score_es_equifax_risk=None, credit_score_fi_asiakas_tieto_risk_grade=None, credit_score_ee_mini=None, applied_amount=None, interest=None, loan_duration=None, county=None, city=None, education=None, employment_duration_current_employer=None, home_ownership_type=None, income_total=None, monthly_payment=None, monthly_payment_day=None, model_version=None, expected_loss=None, rating=None, loss_given_default=None, probability_of_default=None, expected_return_alpha=None, liabilities_total=None, listed_on_utc=None, actual_close_date=None, winning_bids_amount=None, remaining_amount=None, user_bids=None, user_bid_amount=None, fullfilled=None, credit_score=None, scoring_date=None, use_of_loan=None, marital_status=None, nr_of_dependants=None, employment_status=None, employment_position=None, work_experience=None, occupation_area=None, income_from_principal_employer=None, income_from_pension=None, income_from_family_allowance=None, income_from_social_welfare=None, income_from_leave_pay=None, income_from_child_support=None, income_other=None, free_cash=None, debt_to_income=None, ead_rate=None, maturity_factor=None, interest_rate_alpha=None):  # noqa: E501
        """AuctionExtended - a model defined in Swagger"""  # noqa: E501

        self._liabilities = None
        self._debts = None
        self._borrower_history = None
        self._loan_id = None
        self._auction_id = None
        self._loan_number = None
        self._user_name = None
        self._new_credit_customer = None
        self._loan_application_started_date = None
        self._planned_close_date = None
        self._application_signed_hour = None
        self._application_signed_weekday = None
        self._verification_type = None
        self._language_code = None
        self._age = None
        self._date_of_birth = None
        self._gender = None
        self._country = None
        self._credit_score_es_micro_l = None
        self._credit_score_es_equifax_risk = None
        self._credit_score_fi_asiakas_tieto_risk_grade = None
        self._credit_score_ee_mini = None
        self._applied_amount = None
        self._interest = None
        self._loan_duration = None
        self._county = None
        self._city = None
        self._education = None
        self._employment_duration_current_employer = None
        self._home_ownership_type = None
        self._income_total = None
        self._monthly_payment = None
        self._monthly_payment_day = None
        self._model_version = None
        self._expected_loss = None
        self._rating = None
        self._loss_given_default = None
        self._probability_of_default = None
        self._expected_return_alpha = None
        self._liabilities_total = None
        self._listed_on_utc = None
        self._actual_close_date = None
        self._winning_bids_amount = None
        self._remaining_amount = None
        self._user_bids = None
        self._user_bid_amount = None
        self._fullfilled = None
        self._credit_score = None
        self._scoring_date = None
        self._use_of_loan = None
        self._marital_status = None
        self._nr_of_dependants = None
        self._employment_status = None
        self._employment_position = None
        self._work_experience = None
        self._occupation_area = None
        self._income_from_principal_employer = None
        self._income_from_pension = None
        self._income_from_family_allowance = None
        self._income_from_social_welfare = None
        self._income_from_leave_pay = None
        self._income_from_child_support = None
        self._income_other = None
        self._free_cash = None
        self._debt_to_income = None
        self._ead_rate = None
        self._maturity_factor = None
        self._interest_rate_alpha = None
        self.discriminator = None

        if liabilities is not None:
            self.liabilities = liabilities
        if debts is not None:
            self.debts = debts
        if borrower_history is not None:
            self.borrower_history = borrower_history
        if loan_id is not None:
            self.loan_id = loan_id
        if auction_id is not None:
            self.auction_id = auction_id
        if loan_number is not None:
            self.loan_number = loan_number
        if user_name is not None:
            self.user_name = user_name
        if new_credit_customer is not None:
            self.new_credit_customer = new_credit_customer
        if loan_application_started_date is not None:
            self.loan_application_started_date = loan_application_started_date
        if planned_close_date is not None:
            self.planned_close_date = planned_close_date
        if application_signed_hour is not None:
            self.application_signed_hour = application_signed_hour
        if application_signed_weekday is not None:
            self.application_signed_weekday = application_signed_weekday
        if verification_type is not None:
            self.verification_type = verification_type
        if language_code is not None:
            self.language_code = language_code
        if age is not None:
            self.age = age
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if gender is not None:
            self.gender = gender
        if country is not None:
            self.country = country
        if credit_score_es_micro_l is not None:
            self.credit_score_es_micro_l = credit_score_es_micro_l
        if credit_score_es_equifax_risk is not None:
            self.credit_score_es_equifax_risk = credit_score_es_equifax_risk
        if credit_score_fi_asiakas_tieto_risk_grade is not None:
            self.credit_score_fi_asiakas_tieto_risk_grade = credit_score_fi_asiakas_tieto_risk_grade
        if credit_score_ee_mini is not None:
            self.credit_score_ee_mini = credit_score_ee_mini
        if applied_amount is not None:
            self.applied_amount = applied_amount
        if interest is not None:
            self.interest = interest
        if loan_duration is not None:
            self.loan_duration = loan_duration
        if county is not None:
            self.county = county
        if city is not None:
            self.city = city
        if education is not None:
            self.education = education
        if employment_duration_current_employer is not None:
            self.employment_duration_current_employer = employment_duration_current_employer
        if home_ownership_type is not None:
            self.home_ownership_type = home_ownership_type
        if income_total is not None:
            self.income_total = income_total
        if monthly_payment is not None:
            self.monthly_payment = monthly_payment
        if monthly_payment_day is not None:
            self.monthly_payment_day = monthly_payment_day
        if model_version is not None:
            self.model_version = model_version
        if expected_loss is not None:
            self.expected_loss = expected_loss
        if rating is not None:
            self.rating = rating
        if loss_given_default is not None:
            self.loss_given_default = loss_given_default
        if probability_of_default is not None:
            self.probability_of_default = probability_of_default
        if expected_return_alpha is not None:
            self.expected_return_alpha = expected_return_alpha
        if liabilities_total is not None:
            self.liabilities_total = liabilities_total
        if listed_on_utc is not None:
            self.listed_on_utc = listed_on_utc
        if actual_close_date is not None:
            self.actual_close_date = actual_close_date
        if winning_bids_amount is not None:
            self.winning_bids_amount = winning_bids_amount
        if remaining_amount is not None:
            self.remaining_amount = remaining_amount
        if user_bids is not None:
            self.user_bids = user_bids
        if user_bid_amount is not None:
            self.user_bid_amount = user_bid_amount
        if fullfilled is not None:
            self.fullfilled = fullfilled
        if credit_score is not None:
            self.credit_score = credit_score
        if scoring_date is not None:
            self.scoring_date = scoring_date
        if use_of_loan is not None:
            self.use_of_loan = use_of_loan
        if marital_status is not None:
            self.marital_status = marital_status
        if nr_of_dependants is not None:
            self.nr_of_dependants = nr_of_dependants
        if employment_status is not None:
            self.employment_status = employment_status
        if employment_position is not None:
            self.employment_position = employment_position
        if work_experience is not None:
            self.work_experience = work_experience
        if occupation_area is not None:
            self.occupation_area = occupation_area
        if income_from_principal_employer is not None:
            self.income_from_principal_employer = income_from_principal_employer
        if income_from_pension is not None:
            self.income_from_pension = income_from_pension
        if income_from_family_allowance is not None:
            self.income_from_family_allowance = income_from_family_allowance
        if income_from_social_welfare is not None:
            self.income_from_social_welfare = income_from_social_welfare
        if income_from_leave_pay is not None:
            self.income_from_leave_pay = income_from_leave_pay
        if income_from_child_support is not None:
            self.income_from_child_support = income_from_child_support
        if income_other is not None:
            self.income_other = income_other
        if free_cash is not None:
            self.free_cash = free_cash
        if debt_to_income is not None:
            self.debt_to_income = debt_to_income
        if ead_rate is not None:
            self.ead_rate = ead_rate
        if maturity_factor is not None:
            self.maturity_factor = maturity_factor
        if interest_rate_alpha is not None:
            self.interest_rate_alpha = interest_rate_alpha

    @property
    def liabilities(self):
        """Gets the liabilities of this AuctionExtended.  # noqa: E501

        Borrower's liabilities  # noqa: E501

        :return: The liabilities of this AuctionExtended.  # noqa: E501
        :rtype: list[Liability]
        """
        return self._liabilities

    @liabilities.setter
    def liabilities(self, liabilities):
        """Sets the liabilities of this AuctionExtended.

        Borrower's liabilities  # noqa: E501

        :param liabilities: The liabilities of this AuctionExtended.  # noqa: E501
        :type: list[Liability]
        """

        self._liabilities = liabilities

    @property
    def debts(self):
        """Gets the debts of this AuctionExtended.  # noqa: E501

        Borrower's debts  # noqa: E501

        :return: The debts of this AuctionExtended.  # noqa: E501
        :rtype: list[Debt]
        """
        return self._debts

    @debts.setter
    def debts(self, debts):
        """Sets the debts of this AuctionExtended.

        Borrower's debts  # noqa: E501

        :param debts: The debts of this AuctionExtended.  # noqa: E501
        :type: list[Debt]
        """

        self._debts = debts

    @property
    def borrower_history(self):
        """Gets the borrower_history of this AuctionExtended.  # noqa: E501

        Borrower's history  # noqa: E501

        :return: The borrower_history of this AuctionExtended.  # noqa: E501
        :rtype: BorrowerHistory
        """
        return self._borrower_history

    @borrower_history.setter
    def borrower_history(self, borrower_history):
        """Sets the borrower_history of this AuctionExtended.

        Borrower's history  # noqa: E501

        :param borrower_history: The borrower_history of this AuctionExtended.  # noqa: E501
        :type: BorrowerHistory
        """

        self._borrower_history = borrower_history

    @property
    def loan_id(self):
        """Gets the loan_id of this AuctionExtended.  # noqa: E501

        Unique loan identificator  # noqa: E501

        :return: The loan_id of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """Sets the loan_id of this AuctionExtended.

        Unique loan identificator  # noqa: E501

        :param loan_id: The loan_id of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._loan_id = loan_id

    @property
    def auction_id(self):
        """Gets the auction_id of this AuctionExtended.  # noqa: E501

        Unique auction identificator  # noqa: E501

        :return: The auction_id of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._auction_id

    @auction_id.setter
    def auction_id(self, auction_id):
        """Sets the auction_id of this AuctionExtended.

        Unique auction identificator  # noqa: E501

        :param auction_id: The auction_id of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._auction_id = auction_id

    @property
    def loan_number(self):
        """Gets the loan_number of this AuctionExtended.  # noqa: E501

        Number of the loan  # noqa: E501

        :return: The loan_number of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._loan_number

    @loan_number.setter
    def loan_number(self, loan_number):
        """Sets the loan_number of this AuctionExtended.

        Number of the loan  # noqa: E501

        :param loan_number: The loan_number of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._loan_number = loan_number

    @property
    def user_name(self):
        """Gets the user_name of this AuctionExtended.  # noqa: E501

        Customer's Bondora username  # noqa: E501

        :return: The user_name of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AuctionExtended.

        Customer's Bondora username  # noqa: E501

        :param user_name: The user_name of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def new_credit_customer(self):
        """Gets the new_credit_customer of this AuctionExtended.  # noqa: E501

        Did the customer have prior credit history in Bondora              <para>0 Customer had at least 3 months of credit history in Bondora</para><para>1 No prior credit history in Bondora</para>  # noqa: E501

        :return: The new_credit_customer of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._new_credit_customer

    @new_credit_customer.setter
    def new_credit_customer(self, new_credit_customer):
        """Sets the new_credit_customer of this AuctionExtended.

        Did the customer have prior credit history in Bondora              <para>0 Customer had at least 3 months of credit history in Bondora</para><para>1 No prior credit history in Bondora</para>  # noqa: E501

        :param new_credit_customer: The new_credit_customer of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._new_credit_customer = new_credit_customer

    @property
    def loan_application_started_date(self):
        """Gets the loan_application_started_date of this AuctionExtended.  # noqa: E501

        Date when the loan application was started  # noqa: E501

        :return: The loan_application_started_date of this AuctionExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._loan_application_started_date

    @loan_application_started_date.setter
    def loan_application_started_date(self, loan_application_started_date):
        """Sets the loan_application_started_date of this AuctionExtended.

        Date when the loan application was started  # noqa: E501

        :param loan_application_started_date: The loan_application_started_date of this AuctionExtended.  # noqa: E501
        :type: datetime
        """

        self._loan_application_started_date = loan_application_started_date

    @property
    def planned_close_date(self):
        """Gets the planned_close_date of this AuctionExtended.  # noqa: E501

        Date and time when the auction is closed, if it's not funded 100% before that.              Auction will be closed before that, if auction is funded 100%.  # noqa: E501

        :return: The planned_close_date of this AuctionExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_close_date

    @planned_close_date.setter
    def planned_close_date(self, planned_close_date):
        """Sets the planned_close_date of this AuctionExtended.

        Date and time when the auction is closed, if it's not funded 100% before that.              Auction will be closed before that, if auction is funded 100%.  # noqa: E501

        :param planned_close_date: The planned_close_date of this AuctionExtended.  # noqa: E501
        :type: datetime
        """

        self._planned_close_date = planned_close_date

    @property
    def application_signed_hour(self):
        """Gets the application_signed_hour of this AuctionExtended.  # noqa: E501

        Hour of signing the loan application  # noqa: E501

        :return: The application_signed_hour of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._application_signed_hour

    @application_signed_hour.setter
    def application_signed_hour(self, application_signed_hour):
        """Sets the application_signed_hour of this AuctionExtended.

        Hour of signing the loan application  # noqa: E501

        :param application_signed_hour: The application_signed_hour of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._application_signed_hour = application_signed_hour

    @property
    def application_signed_weekday(self):
        """Gets the application_signed_weekday of this AuctionExtended.  # noqa: E501

        Weekday of signing the loan application  # noqa: E501

        :return: The application_signed_weekday of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._application_signed_weekday

    @application_signed_weekday.setter
    def application_signed_weekday(self, application_signed_weekday):
        """Sets the application_signed_weekday of this AuctionExtended.

        Weekday of signing the loan application  # noqa: E501

        :param application_signed_weekday: The application_signed_weekday of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._application_signed_weekday = application_signed_weekday

    @property
    def verification_type(self):
        """Gets the verification_type of this AuctionExtended.  # noqa: E501

        Verification type  # noqa: E501

        :return: The verification_type of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """Sets the verification_type of this AuctionExtended.

        Verification type  # noqa: E501

        :param verification_type: The verification_type of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type

    @property
    def language_code(self):
        """Gets the language_code of this AuctionExtended.  # noqa: E501

        Two letter language code  # noqa: E501

        :return: The language_code of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this AuctionExtended.

        Two letter language code  # noqa: E501

        :param language_code: The language_code of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]  # noqa: E501
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"  # noqa: E501
                .format(language_code, allowed_values)
            )

        self._language_code = language_code

    @property
    def age(self):
        """Gets the age of this AuctionExtended.  # noqa: E501

        Age of the borrower (years)  # noqa: E501

        :return: The age of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this AuctionExtended.

        Age of the borrower (years)  # noqa: E501

        :param age: The age of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this AuctionExtended.  # noqa: E501

        Borrower's date of birth  # noqa: E501

        :return: The date_of_birth of this AuctionExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this AuctionExtended.

        Borrower's date of birth  # noqa: E501

        :param date_of_birth: The date_of_birth of this AuctionExtended.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def gender(self):
        """Gets the gender of this AuctionExtended.  # noqa: E501

        Gender  # noqa: E501

        :return: The gender of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this AuctionExtended.

        Gender  # noqa: E501

        :param gender: The gender of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def country(self):
        """Gets the country of this AuctionExtended.  # noqa: E501

        Residency of the borrower  # noqa: E501

        :return: The country of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AuctionExtended.

        Residency of the borrower  # noqa: E501

        :param country: The country of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def credit_score_es_micro_l(self):
        """Gets the credit_score_es_micro_l of this AuctionExtended.  # noqa: E501

        A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>  # noqa: E501

        :return: The credit_score_es_micro_l of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._credit_score_es_micro_l

    @credit_score_es_micro_l.setter
    def credit_score_es_micro_l(self, credit_score_es_micro_l):
        """Sets the credit_score_es_micro_l of this AuctionExtended.

        A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>  # noqa: E501

        :param credit_score_es_micro_l: The credit_score_es_micro_l of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._credit_score_es_micro_l = credit_score_es_micro_l

    @property
    def credit_score_es_equifax_risk(self):
        """Gets the credit_score_es_equifax_risk of this AuctionExtended.  # noqa: E501

        Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>  # noqa: E501

        :return: The credit_score_es_equifax_risk of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._credit_score_es_equifax_risk

    @credit_score_es_equifax_risk.setter
    def credit_score_es_equifax_risk(self, credit_score_es_equifax_risk):
        """Sets the credit_score_es_equifax_risk of this AuctionExtended.

        Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>  # noqa: E501

        :param credit_score_es_equifax_risk: The credit_score_es_equifax_risk of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._credit_score_es_equifax_risk = credit_score_es_equifax_risk

    @property
    def credit_score_fi_asiakas_tieto_risk_grade(self):
        """Gets the credit_score_fi_asiakas_tieto_risk_grade of this AuctionExtended.  # noqa: E501

        Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>  # noqa: E501

        :return: The credit_score_fi_asiakas_tieto_risk_grade of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._credit_score_fi_asiakas_tieto_risk_grade

    @credit_score_fi_asiakas_tieto_risk_grade.setter
    def credit_score_fi_asiakas_tieto_risk_grade(self, credit_score_fi_asiakas_tieto_risk_grade):
        """Sets the credit_score_fi_asiakas_tieto_risk_grade of this AuctionExtended.

        Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>  # noqa: E501

        :param credit_score_fi_asiakas_tieto_risk_grade: The credit_score_fi_asiakas_tieto_risk_grade of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._credit_score_fi_asiakas_tieto_risk_grade = credit_score_fi_asiakas_tieto_risk_grade

    @property
    def credit_score_ee_mini(self):
        """Gets the credit_score_ee_mini of this AuctionExtended.  # noqa: E501

        Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>  # noqa: E501

        :return: The credit_score_ee_mini of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._credit_score_ee_mini

    @credit_score_ee_mini.setter
    def credit_score_ee_mini(self, credit_score_ee_mini):
        """Sets the credit_score_ee_mini of this AuctionExtended.

        Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>  # noqa: E501

        :param credit_score_ee_mini: The credit_score_ee_mini of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._credit_score_ee_mini = credit_score_ee_mini

    @property
    def applied_amount(self):
        """Gets the applied_amount of this AuctionExtended.  # noqa: E501

        The amount borrower applied for originally  # noqa: E501

        :return: The applied_amount of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._applied_amount

    @applied_amount.setter
    def applied_amount(self, applied_amount):
        """Sets the applied_amount of this AuctionExtended.

        The amount borrower applied for originally  # noqa: E501

        :param applied_amount: The applied_amount of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._applied_amount = applied_amount

    @property
    def interest(self):
        """Gets the interest of this AuctionExtended.  # noqa: E501

        Maximum interest rate accepted in the loan application  # noqa: E501

        :return: The interest of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this AuctionExtended.

        Maximum interest rate accepted in the loan application  # noqa: E501

        :param interest: The interest of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._interest = interest

    @property
    def loan_duration(self):
        """Gets the loan_duration of this AuctionExtended.  # noqa: E501

        The loan term  # noqa: E501

        :return: The loan_duration of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._loan_duration

    @loan_duration.setter
    def loan_duration(self, loan_duration):
        """Sets the loan_duration of this AuctionExtended.

        The loan term  # noqa: E501

        :param loan_duration: The loan_duration of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._loan_duration = loan_duration

    @property
    def county(self):
        """Gets the county of this AuctionExtended.  # noqa: E501

        County of the borrower  # noqa: E501

        :return: The county of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AuctionExtended.

        County of the borrower  # noqa: E501

        :param county: The county of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def city(self):
        """Gets the city of this AuctionExtended.  # noqa: E501

        City of the borrower  # noqa: E501

        :return: The city of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AuctionExtended.

        City of the borrower  # noqa: E501

        :param city: The city of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def education(self):
        """Gets the education of this AuctionExtended.  # noqa: E501

        Education  # noqa: E501

        :return: The education of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this AuctionExtended.

        Education  # noqa: E501

        :param education: The education of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, -1]  # noqa: E501
        if education not in allowed_values:
            raise ValueError(
                "Invalid value for `education` ({0}), must be one of {1}"  # noqa: E501
                .format(education, allowed_values)
            )

        self._education = education

    @property
    def employment_duration_current_employer(self):
        """Gets the employment_duration_current_employer of this AuctionExtended.  # noqa: E501

        Employment time with the current employer  # noqa: E501

        :return: The employment_duration_current_employer of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._employment_duration_current_employer

    @employment_duration_current_employer.setter
    def employment_duration_current_employer(self, employment_duration_current_employer):
        """Sets the employment_duration_current_employer of this AuctionExtended.

        Employment time with the current employer  # noqa: E501

        :param employment_duration_current_employer: The employment_duration_current_employer of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._employment_duration_current_employer = employment_duration_current_employer

    @property
    def home_ownership_type(self):
        """Gets the home_ownership_type of this AuctionExtended.  # noqa: E501

        Type of home ownership  # noqa: E501

        :return: The home_ownership_type of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._home_ownership_type

    @home_ownership_type.setter
    def home_ownership_type(self, home_ownership_type):
        """Sets the home_ownership_type of this AuctionExtended.

        Type of home ownership  # noqa: E501

        :param home_ownership_type: The home_ownership_type of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1]  # noqa: E501
        if home_ownership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `home_ownership_type` ({0}), must be one of {1}"  # noqa: E501
                .format(home_ownership_type, allowed_values)
            )

        self._home_ownership_type = home_ownership_type

    @property
    def income_total(self):
        """Gets the income_total of this AuctionExtended.  # noqa: E501

        Total income  # noqa: E501

        :return: The income_total of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._income_total

    @income_total.setter
    def income_total(self, income_total):
        """Sets the income_total of this AuctionExtended.

        Total income  # noqa: E501

        :param income_total: The income_total of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._income_total = income_total

    @property
    def monthly_payment(self):
        """Gets the monthly_payment of this AuctionExtended.  # noqa: E501

        Loan monthly payment amount.  # noqa: E501

        :return: The monthly_payment of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._monthly_payment

    @monthly_payment.setter
    def monthly_payment(self, monthly_payment):
        """Sets the monthly_payment of this AuctionExtended.

        Loan monthly payment amount.  # noqa: E501

        :param monthly_payment: The monthly_payment of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._monthly_payment = monthly_payment

    @property
    def monthly_payment_day(self):
        """Gets the monthly_payment_day of this AuctionExtended.  # noqa: E501

        The day of the month the loan payments are scheduled for.              The actual date is adjusted for weekends and bank holidays.              E.g. if 10th is a Sunday then the payment will be made on the 11th in that month.  # noqa: E501

        :return: The monthly_payment_day of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._monthly_payment_day

    @monthly_payment_day.setter
    def monthly_payment_day(self, monthly_payment_day):
        """Sets the monthly_payment_day of this AuctionExtended.

        The day of the month the loan payments are scheduled for.              The actual date is adjusted for weekends and bank holidays.              E.g. if 10th is a Sunday then the payment will be made on the 11th in that month.  # noqa: E501

        :param monthly_payment_day: The monthly_payment_day of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._monthly_payment_day = monthly_payment_day

    @property
    def model_version(self):
        """Gets the model_version of this AuctionExtended.  # noqa: E501

        The version of the Rating model used for issuing the Bondora Rating  # noqa: E501

        :return: The model_version of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this AuctionExtended.

        The version of the Rating model used for issuing the Bondora Rating  # noqa: E501

        :param model_version: The model_version of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._model_version = model_version

    @property
    def expected_loss(self):
        """Gets the expected_loss of this AuctionExtended.  # noqa: E501

        Expected Loss calculated by the Rating model  # noqa: E501

        :return: The expected_loss of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._expected_loss

    @expected_loss.setter
    def expected_loss(self, expected_loss):
        """Sets the expected_loss of this AuctionExtended.

        Expected Loss calculated by the Rating model  # noqa: E501

        :param expected_loss: The expected_loss of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._expected_loss = expected_loss

    @property
    def rating(self):
        """Gets the rating of this AuctionExtended.  # noqa: E501

        Bondora Rating issued by the Rating model  # noqa: E501

        :return: The rating of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this AuctionExtended.

        Bondora Rating issued by the Rating model  # noqa: E501

        :param rating: The rating of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def loss_given_default(self):
        """Gets the loss_given_default of this AuctionExtended.  # noqa: E501

        Gives the percentage of outstanding exposure at the time of default that an investor is likely to lose if a loan actually defaults.               This means the proportion of funds lost for the investor after all expected recovery and accounting for the time value of the money recovered.               In general, LGD parameter is intended to be estimated based on the historical recoveries. However, in new markets where limited experience does not allow us more precise loss given default estimates, a LGD of 90% is assumed.  # noqa: E501

        :return: The loss_given_default of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._loss_given_default

    @loss_given_default.setter
    def loss_given_default(self, loss_given_default):
        """Sets the loss_given_default of this AuctionExtended.

        Gives the percentage of outstanding exposure at the time of default that an investor is likely to lose if a loan actually defaults.               This means the proportion of funds lost for the investor after all expected recovery and accounting for the time value of the money recovered.               In general, LGD parameter is intended to be estimated based on the historical recoveries. However, in new markets where limited experience does not allow us more precise loss given default estimates, a LGD of 90% is assumed.  # noqa: E501

        :param loss_given_default: The loss_given_default of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._loss_given_default = loss_given_default

    @property
    def probability_of_default(self):
        """Gets the probability_of_default of this AuctionExtended.  # noqa: E501

        Probability of Default, refers to a loan’s probability of default within one year horizon.  # noqa: E501

        :return: The probability_of_default of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._probability_of_default

    @probability_of_default.setter
    def probability_of_default(self, probability_of_default):
        """Sets the probability_of_default of this AuctionExtended.

        Probability of Default, refers to a loan’s probability of default within one year horizon.  # noqa: E501

        :param probability_of_default: The probability_of_default of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._probability_of_default = probability_of_default

    @property
    def expected_return_alpha(self):
        """Gets the expected_return_alpha of this AuctionExtended.  # noqa: E501

        Expected return alpha  # noqa: E501

        :return: The expected_return_alpha of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._expected_return_alpha

    @expected_return_alpha.setter
    def expected_return_alpha(self, expected_return_alpha):
        """Sets the expected_return_alpha of this AuctionExtended.

        Expected return alpha  # noqa: E501

        :param expected_return_alpha: The expected_return_alpha of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._expected_return_alpha = expected_return_alpha

    @property
    def liabilities_total(self):
        """Gets the liabilities_total of this AuctionExtended.  # noqa: E501

        Total liabilities  # noqa: E501

        :return: The liabilities_total of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._liabilities_total

    @liabilities_total.setter
    def liabilities_total(self, liabilities_total):
        """Sets the liabilities_total of this AuctionExtended.

        Total liabilities  # noqa: E501

        :param liabilities_total: The liabilities_total of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._liabilities_total = liabilities_total

    @property
    def listed_on_utc(self):
        """Gets the listed_on_utc of this AuctionExtended.  # noqa: E501

        Date when auction was published  # noqa: E501

        :return: The listed_on_utc of this AuctionExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._listed_on_utc

    @listed_on_utc.setter
    def listed_on_utc(self, listed_on_utc):
        """Sets the listed_on_utc of this AuctionExtended.

        Date when auction was published  # noqa: E501

        :param listed_on_utc: The listed_on_utc of this AuctionExtended.  # noqa: E501
        :type: datetime
        """

        self._listed_on_utc = listed_on_utc

    @property
    def actual_close_date(self):
        """Gets the actual_close_date of this AuctionExtended.  # noqa: E501

        Date and time when the auction was actually closed. Is null, if auction is active.  # noqa: E501

        :return: The actual_close_date of this AuctionExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_close_date

    @actual_close_date.setter
    def actual_close_date(self, actual_close_date):
        """Sets the actual_close_date of this AuctionExtended.

        Date and time when the auction was actually closed. Is null, if auction is active.  # noqa: E501

        :param actual_close_date: The actual_close_date of this AuctionExtended.  # noqa: E501
        :type: datetime
        """

        self._actual_close_date = actual_close_date

    @property
    def winning_bids_amount(self):
        """Gets the winning_bids_amount of this AuctionExtended.  # noqa: E501

        The amount that auction is fulfilled, taken amount only bids where investors have enough funds.              This is preliminary calculated amount and can change when trying to close auction (auction is closed, when auction is funded 100% or PlannedCloseDate is reached) and specific investor(s) do not have enough funds.  # noqa: E501

        :return: The winning_bids_amount of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._winning_bids_amount

    @winning_bids_amount.setter
    def winning_bids_amount(self, winning_bids_amount):
        """Sets the winning_bids_amount of this AuctionExtended.

        The amount that auction is fulfilled, taken amount only bids where investors have enough funds.              This is preliminary calculated amount and can change when trying to close auction (auction is closed, when auction is funded 100% or PlannedCloseDate is reached) and specific investor(s) do not have enough funds.  # noqa: E501

        :param winning_bids_amount: The winning_bids_amount of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._winning_bids_amount = winning_bids_amount

    @property
    def remaining_amount(self):
        """Gets the remaining_amount of this AuctionExtended.  # noqa: E501

        The amount that is remaining to be funded (AppliedAmount - WinningBidsAmount).  # noqa: E501

        :return: The remaining_amount of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._remaining_amount

    @remaining_amount.setter
    def remaining_amount(self, remaining_amount):
        """Sets the remaining_amount of this AuctionExtended.

        The amount that is remaining to be funded (AppliedAmount - WinningBidsAmount).  # noqa: E501

        :param remaining_amount: The remaining_amount of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._remaining_amount = remaining_amount

    @property
    def user_bids(self):
        """Gets the user_bids of this AuctionExtended.  # noqa: E501

        How many bids current user has bidden into the auction  # noqa: E501

        :return: The user_bids of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._user_bids

    @user_bids.setter
    def user_bids(self, user_bids):
        """Sets the user_bids of this AuctionExtended.

        How many bids current user has bidden into the auction  # noqa: E501

        :param user_bids: The user_bids of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._user_bids = user_bids

    @property
    def user_bid_amount(self):
        """Gets the user_bid_amount of this AuctionExtended.  # noqa: E501

        How much current user has bidden into the auction  # noqa: E501

        :return: The user_bid_amount of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._user_bid_amount

    @user_bid_amount.setter
    def user_bid_amount(self, user_bid_amount):
        """Sets the user_bid_amount of this AuctionExtended.

        How much current user has bidden into the auction  # noqa: E501

        :param user_bid_amount: The user_bid_amount of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._user_bid_amount = user_bid_amount

    @property
    def fullfilled(self):
        """Gets the fullfilled of this AuctionExtended.  # noqa: E501

        Precentage, how much the auction is fulfilled. Can be more than 100%, if overfunded.  # noqa: E501

        :return: The fullfilled of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._fullfilled

    @fullfilled.setter
    def fullfilled(self, fullfilled):
        """Sets the fullfilled of this AuctionExtended.

        Precentage, how much the auction is fulfilled. Can be more than 100%, if overfunded.  # noqa: E501

        :param fullfilled: The fullfilled of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._fullfilled = fullfilled

    @property
    def credit_score(self):
        """Gets the credit_score of this AuctionExtended.  # noqa: E501

        <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>  # noqa: E501

        :return: The credit_score of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._credit_score

    @credit_score.setter
    def credit_score(self, credit_score):
        """Sets the credit_score of this AuctionExtended.

        <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>  # noqa: E501

        :param credit_score: The credit_score of this AuctionExtended.  # noqa: E501
        :type: int
        """

        self._credit_score = credit_score

    @property
    def scoring_date(self):
        """Gets the scoring_date of this AuctionExtended.  # noqa: E501

        Date when the Rating was calculated for this loan  # noqa: E501

        :return: The scoring_date of this AuctionExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._scoring_date

    @scoring_date.setter
    def scoring_date(self, scoring_date):
        """Sets the scoring_date of this AuctionExtended.

        Date when the Rating was calculated for this loan  # noqa: E501

        :param scoring_date: The scoring_date of this AuctionExtended.  # noqa: E501
        :type: datetime
        """

        self._scoring_date = scoring_date

    @property
    def use_of_loan(self):
        """Gets the use_of_loan of this AuctionExtended.  # noqa: E501

        Use of loan              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :return: The use_of_loan of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._use_of_loan

    @use_of_loan.setter
    def use_of_loan(self, use_of_loan):
        """Sets the use_of_loan of this AuctionExtended.

        Use of loan              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :param use_of_loan: The use_of_loan of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, -1]  # noqa: E501
        if use_of_loan not in allowed_values:
            raise ValueError(
                "Invalid value for `use_of_loan` ({0}), must be one of {1}"  # noqa: E501
                .format(use_of_loan, allowed_values)
            )

        self._use_of_loan = use_of_loan

    @property
    def marital_status(self):
        """Gets the marital_status of this AuctionExtended.  # noqa: E501

        Marital status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :return: The marital_status of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this AuctionExtended.

        Marital status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :param marital_status: The marital_status of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, -1]  # noqa: E501
        if marital_status not in allowed_values:
            raise ValueError(
                "Invalid value for `marital_status` ({0}), must be one of {1}"  # noqa: E501
                .format(marital_status, allowed_values)
            )

        self._marital_status = marital_status

    @property
    def nr_of_dependants(self):
        """Gets the nr_of_dependants of this AuctionExtended.  # noqa: E501

        Number of children or other dependants              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>  # noqa: E501

        :return: The nr_of_dependants of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._nr_of_dependants

    @nr_of_dependants.setter
    def nr_of_dependants(self, nr_of_dependants):
        """Sets the nr_of_dependants of this AuctionExtended.

        Number of children or other dependants              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>  # noqa: E501

        :param nr_of_dependants: The nr_of_dependants of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._nr_of_dependants = nr_of_dependants

    @property
    def employment_status(self):
        """Gets the employment_status of this AuctionExtended.  # noqa: E501

        Employment status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :return: The employment_status of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this AuctionExtended.

        Employment status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :param employment_status: The employment_status of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, -1]  # noqa: E501
        if employment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status

    @property
    def employment_position(self):
        """Gets the employment_position of this AuctionExtended.  # noqa: E501

        Employment position              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>  # noqa: E501

        :return: The employment_position of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._employment_position

    @employment_position.setter
    def employment_position(self, employment_position):
        """Sets the employment_position of this AuctionExtended.

        Employment position              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>  # noqa: E501

        :param employment_position: The employment_position of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._employment_position = employment_position

    @property
    def work_experience(self):
        """Gets the work_experience of this AuctionExtended.  # noqa: E501

        Work experience in total              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>  # noqa: E501

        :return: The work_experience of this AuctionExtended.  # noqa: E501
        :rtype: str
        """
        return self._work_experience

    @work_experience.setter
    def work_experience(self, work_experience):
        """Sets the work_experience of this AuctionExtended.

        Work experience in total              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>  # noqa: E501

        :param work_experience: The work_experience of this AuctionExtended.  # noqa: E501
        :type: str
        """

        self._work_experience = work_experience

    @property
    def occupation_area(self):
        """Gets the occupation_area of this AuctionExtended.  # noqa: E501

        Occupation area              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :return: The occupation_area of this AuctionExtended.  # noqa: E501
        :rtype: int
        """
        return self._occupation_area

    @occupation_area.setter
    def occupation_area(self, occupation_area):
        """Sets the occupation_area of this AuctionExtended.

        Occupation area              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>  # noqa: E501

        :param occupation_area: The occupation_area of this AuctionExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, -1]  # noqa: E501
        if occupation_area not in allowed_values:
            raise ValueError(
                "Invalid value for `occupation_area` ({0}), must be one of {1}"  # noqa: E501
                .format(occupation_area, allowed_values)
            )

        self._occupation_area = occupation_area

    @property
    def income_from_principal_employer(self):
        """Gets the income_from_principal_employer of this AuctionExtended.  # noqa: E501

        Salary              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The income_from_principal_employer of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._income_from_principal_employer

    @income_from_principal_employer.setter
    def income_from_principal_employer(self, income_from_principal_employer):
        """Sets the income_from_principal_employer of this AuctionExtended.

        Salary              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param income_from_principal_employer: The income_from_principal_employer of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._income_from_principal_employer = income_from_principal_employer

    @property
    def income_from_pension(self):
        """Gets the income_from_pension of this AuctionExtended.  # noqa: E501

        Pension              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The income_from_pension of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._income_from_pension

    @income_from_pension.setter
    def income_from_pension(self, income_from_pension):
        """Sets the income_from_pension of this AuctionExtended.

        Pension              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param income_from_pension: The income_from_pension of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._income_from_pension = income_from_pension

    @property
    def income_from_family_allowance(self):
        """Gets the income_from_family_allowance of this AuctionExtended.  # noqa: E501

        Family allowance              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The income_from_family_allowance of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._income_from_family_allowance

    @income_from_family_allowance.setter
    def income_from_family_allowance(self, income_from_family_allowance):
        """Sets the income_from_family_allowance of this AuctionExtended.

        Family allowance              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param income_from_family_allowance: The income_from_family_allowance of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._income_from_family_allowance = income_from_family_allowance

    @property
    def income_from_social_welfare(self):
        """Gets the income_from_social_welfare of this AuctionExtended.  # noqa: E501

        Social welfare              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The income_from_social_welfare of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._income_from_social_welfare

    @income_from_social_welfare.setter
    def income_from_social_welfare(self, income_from_social_welfare):
        """Sets the income_from_social_welfare of this AuctionExtended.

        Social welfare              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param income_from_social_welfare: The income_from_social_welfare of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._income_from_social_welfare = income_from_social_welfare

    @property
    def income_from_leave_pay(self):
        """Gets the income_from_leave_pay of this AuctionExtended.  # noqa: E501

        Leave pay              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The income_from_leave_pay of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._income_from_leave_pay

    @income_from_leave_pay.setter
    def income_from_leave_pay(self, income_from_leave_pay):
        """Sets the income_from_leave_pay of this AuctionExtended.

        Leave pay              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param income_from_leave_pay: The income_from_leave_pay of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._income_from_leave_pay = income_from_leave_pay

    @property
    def income_from_child_support(self):
        """Gets the income_from_child_support of this AuctionExtended.  # noqa: E501

        Child support              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The income_from_child_support of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._income_from_child_support

    @income_from_child_support.setter
    def income_from_child_support(self, income_from_child_support):
        """Sets the income_from_child_support of this AuctionExtended.

        Child support              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param income_from_child_support: The income_from_child_support of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._income_from_child_support = income_from_child_support

    @property
    def income_other(self):
        """Gets the income_other of this AuctionExtended.  # noqa: E501

        Other income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The income_other of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._income_other

    @income_other.setter
    def income_other(self, income_other):
        """Sets the income_other of this AuctionExtended.

        Other income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param income_other: The income_other of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._income_other = income_other

    @property
    def free_cash(self):
        """Gets the free_cash of this AuctionExtended.  # noqa: E501

        Discretionary Income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The free_cash of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._free_cash

    @free_cash.setter
    def free_cash(self, free_cash):
        """Sets the free_cash of this AuctionExtended.

        Discretionary Income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param free_cash: The free_cash of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._free_cash = free_cash

    @property
    def debt_to_income(self):
        """Gets the debt_to_income of this AuctionExtended.  # noqa: E501

        Debt to income ratio              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :return: The debt_to_income of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._debt_to_income

    @debt_to_income.setter
    def debt_to_income(self, debt_to_income):
        """Sets the debt_to_income of this AuctionExtended.

        Debt to income ratio              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>  # noqa: E501

        :param debt_to_income: The debt_to_income of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._debt_to_income = debt_to_income

    @property
    def ead_rate(self):
        """Gets the ead_rate of this AuctionExtended.  # noqa: E501

        Exposure at Default (expressed as a percentage of the original loan amount), indicates outstanding investor exposure at the time of default, including outstanding principal amount plus accrued but unpaid interests.  # noqa: E501

        :return: The ead_rate of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._ead_rate

    @ead_rate.setter
    def ead_rate(self, ead_rate):
        """Sets the ead_rate of this AuctionExtended.

        Exposure at Default (expressed as a percentage of the original loan amount), indicates outstanding investor exposure at the time of default, including outstanding principal amount plus accrued but unpaid interests.  # noqa: E501

        :param ead_rate: The ead_rate of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._ead_rate = ead_rate

    @property
    def maturity_factor(self):
        """Gets the maturity_factor of this AuctionExtended.  # noqa: E501

        Maturity Factor M of 1.3 is assumed for loans with duration exceeding one year.  # noqa: E501

        :return: The maturity_factor of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._maturity_factor

    @maturity_factor.setter
    def maturity_factor(self, maturity_factor):
        """Sets the maturity_factor of this AuctionExtended.

        Maturity Factor M of 1.3 is assumed for loans with duration exceeding one year.  # noqa: E501

        :param maturity_factor: The maturity_factor of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._maturity_factor = maturity_factor

    @property
    def interest_rate_alpha(self):
        """Gets the interest_rate_alpha of this AuctionExtended.  # noqa: E501

        Interest rate alpha  # noqa: E501

        :return: The interest_rate_alpha of this AuctionExtended.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate_alpha

    @interest_rate_alpha.setter
    def interest_rate_alpha(self, interest_rate_alpha):
        """Sets the interest_rate_alpha of this AuctionExtended.

        Interest rate alpha  # noqa: E501

        :param interest_rate_alpha: The interest_rate_alpha of this AuctionExtended.  # noqa: E501
        :type: float
        """

        self._interest_rate_alpha = interest_rate_alpha

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuctionExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuctionExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
