# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_type': 'int',
        'period_start': 'datetime',
        'period_end': 'datetime'
    }

    attribute_map = {
        'report_type': 'ReportType',
        'period_start': 'PeriodStart',
        'period_end': 'PeriodEnd'
    }

    def __init__(self, report_type=None, period_start=None, period_end=None):  # noqa: E501
        """ReportCreateRequest - a model defined in Swagger"""  # noqa: E501

        self._report_type = None
        self._period_start = None
        self._period_end = None
        self.discriminator = None

        self.report_type = report_type
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end

    @property
    def report_type(self):
        """Gets the report_type of this ReportCreateRequest.  # noqa: E501


        :return: The report_type of this ReportCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportCreateRequest.


        :param report_type: The report_type of this ReportCreateRequest.  # noqa: E501
        :type: int
        """
        if report_type is None:
            raise ValueError("Invalid value for `report_type`, must not be `None`")  # noqa: E501
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]  # noqa: E501
        if report_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"  # noqa: E501
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    @property
    def period_start(self):
        """Gets the period_start of this ReportCreateRequest.  # noqa: E501


        :return: The period_start of this ReportCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this ReportCreateRequest.


        :param period_start: The period_start of this ReportCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this ReportCreateRequest.  # noqa: E501


        :return: The period_end of this ReportCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this ReportCreateRequest.


        :param period_end: The period_end of this ReportCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
