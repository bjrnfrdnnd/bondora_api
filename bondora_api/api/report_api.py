# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bondora_api.api_client import ApiClient


class ReportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def report_generate_report(self, request, **kwargs):  # noqa: E501
        """Request to generate specified report type for set period.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_generate_report(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportCreateRequest request:  (required)
        :return: ApiResultCreateReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.report_generate_report_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.report_generate_report_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def report_generate_report_with_http_info(self, request, **kwargs):  # noqa: E501
        """Request to generate specified report type for set period.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_generate_report_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportCreateRequest request:  (required)
        :return: ApiResultCreateReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_generate_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `report_generate_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResultCreateReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report_get_public_dataset(self, **kwargs):  # noqa: E501
        """Provides daily public dataset of all loan data that is not covered by the data protection laws.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_get_public_dataset(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_loan_ids: Specific loans to search
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param datetime request_loan_date_from: Loan start date from
        :param datetime request_loan_date_to: Loan start date to
        :param int request_page_size: Max items in result, up to 10000
        :param int request_page_nr: Result page nr
        :return: ApiResultPublicDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.report_get_public_dataset_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.report_get_public_dataset_with_http_info(**kwargs)  # noqa: E501
            return data

    def report_get_public_dataset_with_http_info(self, **kwargs):  # noqa: E501
        """Provides daily public dataset of all loan data that is not covered by the data protection laws.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_get_public_dataset_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_loan_ids: Specific loans to search
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param datetime request_loan_date_from: Loan start date from
        :param datetime request_loan_date_to: Loan start date to
        :param int request_page_size: Max items in result, up to 10000
        :param int request_page_nr: Result page nr
        :return: ApiResultPublicDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_loan_ids', 'request_countries', 'request_ratings', 'request_loan_date_from', 'request_loan_date_to', 'request_page_size', 'request_page_nr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_get_public_dataset" % key
                )
            params[key] = val
        del params['kwargs']

        if 'request_page_size' in params and params['request_page_size'] > 10000:  # noqa: E501
            raise ValueError("Invalid value for parameter `request_page_size` when calling `report_get_public_dataset`, must be a value less than or equal to `10000`")  # noqa: E501
        if 'request_page_size' in params and params['request_page_size'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `request_page_size` when calling `report_get_public_dataset`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'request_page_nr' in params and params['request_page_nr'] > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `report_get_public_dataset`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if 'request_page_nr' in params and params['request_page_nr'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `report_get_public_dataset`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_loan_ids' in params:
            query_params.append(('request.loanIds', params['request_loan_ids']))  # noqa: E501
            collection_formats['request.loanIds'] = 'multi'  # noqa: E501
        if 'request_countries' in params:
            query_params.append(('request.countries', params['request_countries']))  # noqa: E501
            collection_formats['request.countries'] = 'multi'  # noqa: E501
        if 'request_ratings' in params:
            query_params.append(('request.ratings', params['request_ratings']))  # noqa: E501
            collection_formats['request.ratings'] = 'multi'  # noqa: E501
        if 'request_loan_date_from' in params:
            query_params.append(('request.loanDateFrom', params['request_loan_date_from']))  # noqa: E501
        if 'request_loan_date_to' in params:
            query_params.append(('request.loanDateTo', params['request_loan_date_to']))  # noqa: E501
        if 'request_page_size' in params:
            query_params.append(('request.pageSize', params['request_page_size']))  # noqa: E501
        if 'request_page_nr' in params:
            query_params.append(('request.pageNr', params['request_page_nr']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/publicdataset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResultPublicDataset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report_get_report(self, id, **kwargs):  # noqa: E501
        """Get report data for specified report identificator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_get_report(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ReportId (required)
        :return: ApiResultReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.report_get_report_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.report_get_report_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def report_get_report_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get report data for specified report identificator.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_get_report_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ReportId (required)
        :return: ApiResultReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_get_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `report_get_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/report/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResultReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report_get_report_list(self, **kwargs):  # noqa: E501
        """List of all reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_get_report_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiResultReportList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.report_get_report_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.report_get_report_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def report_get_report_list_with_http_info(self, **kwargs):  # noqa: E501
        """List of all reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_get_report_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiResultReportList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_get_report_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResultReportList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
