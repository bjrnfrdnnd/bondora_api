# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bondora_api.api_client import ApiClient


class AuctionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auction_get(self, id, **kwargs):  # noqa: E501
        """Gets Auction info by auction identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auction_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Auction's identifier (required)
        :return: ApiResultExtendedAuction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auction_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.auction_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def auction_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets Auction info by auction identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auction_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Auction's identifier (required)
        :return: ApiResultExtendedAuction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auction_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `auction_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/auction/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResultExtendedAuction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auction_get_active(self, **kwargs):  # noqa: E501
        """Gets list of active Auctions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auction_get_active(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param int request_gender: Borrower's gender: Male 0, Female 1, Unknown 2
        :param int request_sum_min: Minimal loan amount
        :param int request_sum_max: Maximum loan amount
        :param list[int] request_terms: Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months
        :param int request_age_min: Minimal age
        :param int request_age_max: Maximum age
        :param int request_loan_number: Loan number
        :param str request_user_name: Username
        :param datetime request_application_date_from: Loan application started date from
        :param datetime request_application_date_to: Loan application started date to
        :param int request_credit_score_min: Minimum credit score
        :param int request_credit_score_max: Maximum credit score
        :param list[str] request_credit_scores_ee_mini: Credit score for EE loans
        :param float request_interest_min: Minimum interest
        :param float request_interest_max: Maximum interest
        :param float request_income_total_min: Minimal total income
        :param float request_income_total_max: Maximum total income
        :param int request_model_version: Model version
        :param float request_expected_loss_min: Minimal expected loss
        :param float request_expected_loss_max: Maximum expected loss
        :param datetime request_listed_on_utc_from: Date when auction was published from
        :param datetime request_listed_on_utc_to: Date when auction was published to
        :param int request_page_size: Max items in result, up to 20000
        :param int request_page_nr: Result page nr
        :return: ApiResultAuctions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auction_get_active_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auction_get_active_with_http_info(**kwargs)  # noqa: E501
            return data

    def auction_get_active_with_http_info(self, **kwargs):  # noqa: E501
        """Gets list of active Auctions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auction_get_active_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param int request_gender: Borrower's gender: Male 0, Female 1, Unknown 2
        :param int request_sum_min: Minimal loan amount
        :param int request_sum_max: Maximum loan amount
        :param list[int] request_terms: Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months
        :param int request_age_min: Minimal age
        :param int request_age_max: Maximum age
        :param int request_loan_number: Loan number
        :param str request_user_name: Username
        :param datetime request_application_date_from: Loan application started date from
        :param datetime request_application_date_to: Loan application started date to
        :param int request_credit_score_min: Minimum credit score
        :param int request_credit_score_max: Maximum credit score
        :param list[str] request_credit_scores_ee_mini: Credit score for EE loans
        :param float request_interest_min: Minimum interest
        :param float request_interest_max: Maximum interest
        :param float request_income_total_min: Minimal total income
        :param float request_income_total_max: Maximum total income
        :param int request_model_version: Model version
        :param float request_expected_loss_min: Minimal expected loss
        :param float request_expected_loss_max: Maximum expected loss
        :param datetime request_listed_on_utc_from: Date when auction was published from
        :param datetime request_listed_on_utc_to: Date when auction was published to
        :param int request_page_size: Max items in result, up to 20000
        :param int request_page_nr: Result page nr
        :return: ApiResultAuctions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_countries', 'request_ratings', 'request_gender', 'request_sum_min', 'request_sum_max', 'request_terms', 'request_age_min', 'request_age_max', 'request_loan_number', 'request_user_name', 'request_application_date_from', 'request_application_date_to', 'request_credit_score_min', 'request_credit_score_max', 'request_credit_scores_ee_mini', 'request_interest_min', 'request_interest_max', 'request_income_total_min', 'request_income_total_max', 'request_model_version', 'request_expected_loss_min', 'request_expected_loss_max', 'request_listed_on_utc_from', 'request_listed_on_utc_to', 'request_page_size', 'request_page_nr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auction_get_active" % key
                )
            params[key] = val
        del params['kwargs']

        if 'request_page_size' in params and params['request_page_size'] > 20000:  # noqa: E501
            raise ValueError("Invalid value for parameter `request_page_size` when calling `auction_get_active`, must be a value less than or equal to `20000`")  # noqa: E501
        if 'request_page_size' in params and params['request_page_size'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `request_page_size` when calling `auction_get_active`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'request_page_nr' in params and params['request_page_nr'] > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `auction_get_active`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if 'request_page_nr' in params and params['request_page_nr'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `auction_get_active`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_countries' in params:
            query_params.append(('request.countries', params['request_countries']))  # noqa: E501
            collection_formats['request.countries'] = 'multi'  # noqa: E501
        if 'request_ratings' in params:
            query_params.append(('request.ratings', params['request_ratings']))  # noqa: E501
            collection_formats['request.ratings'] = 'multi'  # noqa: E501
        if 'request_gender' in params:
            query_params.append(('request.gender', params['request_gender']))  # noqa: E501
        if 'request_sum_min' in params:
            query_params.append(('request.sumMin', params['request_sum_min']))  # noqa: E501
        if 'request_sum_max' in params:
            query_params.append(('request.sumMax', params['request_sum_max']))  # noqa: E501
        if 'request_terms' in params:
            query_params.append(('request.terms', params['request_terms']))  # noqa: E501
            collection_formats['request.terms'] = 'multi'  # noqa: E501
        if 'request_age_min' in params:
            query_params.append(('request.ageMin', params['request_age_min']))  # noqa: E501
        if 'request_age_max' in params:
            query_params.append(('request.ageMax', params['request_age_max']))  # noqa: E501
        if 'request_loan_number' in params:
            query_params.append(('request.loanNumber', params['request_loan_number']))  # noqa: E501
        if 'request_user_name' in params:
            query_params.append(('request.userName', params['request_user_name']))  # noqa: E501
        if 'request_application_date_from' in params:
            query_params.append(('request.applicationDateFrom', params['request_application_date_from']))  # noqa: E501
        if 'request_application_date_to' in params:
            query_params.append(('request.applicationDateTo', params['request_application_date_to']))  # noqa: E501
        if 'request_credit_score_min' in params:
            query_params.append(('request.creditScoreMin', params['request_credit_score_min']))  # noqa: E501
        if 'request_credit_score_max' in params:
            query_params.append(('request.creditScoreMax', params['request_credit_score_max']))  # noqa: E501
        if 'request_credit_scores_ee_mini' in params:
            query_params.append(('request.creditScoresEeMini', params['request_credit_scores_ee_mini']))  # noqa: E501
            collection_formats['request.creditScoresEeMini'] = 'multi'  # noqa: E501
        if 'request_interest_min' in params:
            query_params.append(('request.interestMin', params['request_interest_min']))  # noqa: E501
        if 'request_interest_max' in params:
            query_params.append(('request.interestMax', params['request_interest_max']))  # noqa: E501
        if 'request_income_total_min' in params:
            query_params.append(('request.incomeTotalMin', params['request_income_total_min']))  # noqa: E501
        if 'request_income_total_max' in params:
            query_params.append(('request.incomeTotalMax', params['request_income_total_max']))  # noqa: E501
        if 'request_model_version' in params:
            query_params.append(('request.modelVersion', params['request_model_version']))  # noqa: E501
        if 'request_expected_loss_min' in params:
            query_params.append(('request.expectedLossMin', params['request_expected_loss_min']))  # noqa: E501
        if 'request_expected_loss_max' in params:
            query_params.append(('request.expectedLossMax', params['request_expected_loss_max']))  # noqa: E501
        if 'request_listed_on_utc_from' in params:
            query_params.append(('request.listedOnUTCFrom', params['request_listed_on_utc_from']))  # noqa: E501
        if 'request_listed_on_utc_to' in params:
            query_params.append(('request.listedOnUTCTo', params['request_listed_on_utc_to']))  # noqa: E501
        if 'request_page_size' in params:
            query_params.append(('request.pageSize', params['request_page_size']))  # noqa: E501
        if 'request_page_nr' in params:
            query_params.append(('request.pageNr', params['request_page_nr']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/auctions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResultAuctions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
