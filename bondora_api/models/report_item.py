# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_id': 'str',
        'created_on': 'datetime',
        'generated_on': 'datetime',
        'period_start': 'datetime',
        'period_end': 'datetime',
        'report_type': 'int'
    }

    attribute_map = {
        'report_id': 'ReportId',
        'created_on': 'CreatedOn',
        'generated_on': 'GeneratedOn',
        'period_start': 'PeriodStart',
        'period_end': 'PeriodEnd',
        'report_type': 'ReportType'
    }

    def __init__(self, report_id=None, created_on=None, generated_on=None, period_start=None, period_end=None, report_type=None):  # noqa: E501
        """ReportItem - a model defined in Swagger"""  # noqa: E501

        self._report_id = None
        self._created_on = None
        self._generated_on = None
        self._period_start = None
        self._period_end = None
        self._report_type = None
        self.discriminator = None

        if report_id is not None:
            self.report_id = report_id
        if created_on is not None:
            self.created_on = created_on
        if generated_on is not None:
            self.generated_on = generated_on
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        if report_type is not None:
            self.report_type = report_type

    @property
    def report_id(self):
        """Gets the report_id of this ReportItem.  # noqa: E501

        Reports unique identifier  # noqa: E501

        :return: The report_id of this ReportItem.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this ReportItem.

        Reports unique identifier  # noqa: E501

        :param report_id: The report_id of this ReportItem.  # noqa: E501
        :type: str
        """

        self._report_id = report_id

    @property
    def created_on(self):
        """Gets the created_on of this ReportItem.  # noqa: E501

        Report created date  # noqa: E501

        :return: The created_on of this ReportItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ReportItem.

        Report created date  # noqa: E501

        :param created_on: The created_on of this ReportItem.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def generated_on(self):
        """Gets the generated_on of this ReportItem.  # noqa: E501

        Report generated date  # noqa: E501

        :return: The generated_on of this ReportItem.  # noqa: E501
        :rtype: datetime
        """
        return self._generated_on

    @generated_on.setter
    def generated_on(self, generated_on):
        """Sets the generated_on of this ReportItem.

        Report generated date  # noqa: E501

        :param generated_on: The generated_on of this ReportItem.  # noqa: E501
        :type: datetime
        """

        self._generated_on = generated_on

    @property
    def period_start(self):
        """Gets the period_start of this ReportItem.  # noqa: E501

        Report period end date  # noqa: E501

        :return: The period_start of this ReportItem.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this ReportItem.

        Report period end date  # noqa: E501

        :param period_start: The period_start of this ReportItem.  # noqa: E501
        :type: datetime
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this ReportItem.  # noqa: E501

        Report period start date  # noqa: E501

        :return: The period_end of this ReportItem.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this ReportItem.

        Report period start date  # noqa: E501

        :param period_end: The period_end of this ReportItem.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def report_type(self):
        """Gets the report_type of this ReportItem.  # noqa: E501

        Report's type  # noqa: E501

        :return: The report_type of this ReportItem.  # noqa: E501
        :rtype: int
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportItem.

        Report's type  # noqa: E501

        :param report_type: The report_type of this ReportItem.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]  # noqa: E501
        if report_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"  # noqa: E501
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
