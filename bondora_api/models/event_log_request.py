# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventLogRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_date_from': 'datetime',
        'event_date_to': 'datetime',
        'event_type': 'int',
        'ip_address': 'str',
        'page_size': 'int',
        'page_nr': 'int'
    }

    attribute_map = {
        'event_date_from': 'EventDateFrom',
        'event_date_to': 'EventDateTo',
        'event_type': 'EventType',
        'ip_address': 'IpAddress',
        'page_size': 'PageSize',
        'page_nr': 'PageNr'
    }

    def __init__(self, event_date_from=None, event_date_to=None, event_type=None, ip_address=None, page_size=None, page_nr=None):  # noqa: E501
        """EventLogRequest - a model defined in Swagger"""  # noqa: E501

        self._event_date_from = None
        self._event_date_to = None
        self._event_type = None
        self._ip_address = None
        self._page_size = None
        self._page_nr = None
        self.discriminator = None

        if event_date_from is not None:
            self.event_date_from = event_date_from
        if event_date_to is not None:
            self.event_date_to = event_date_to
        if event_type is not None:
            self.event_type = event_type
        if ip_address is not None:
            self.ip_address = ip_address
        if page_size is not None:
            self.page_size = page_size
        if page_nr is not None:
            self.page_nr = page_nr

    @property
    def event_date_from(self):
        """Gets the event_date_from of this EventLogRequest.  # noqa: E501

        Start datetime  # noqa: E501

        :return: The event_date_from of this EventLogRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date_from

    @event_date_from.setter
    def event_date_from(self, event_date_from):
        """Sets the event_date_from of this EventLogRequest.

        Start datetime  # noqa: E501

        :param event_date_from: The event_date_from of this EventLogRequest.  # noqa: E501
        :type: datetime
        """

        self._event_date_from = event_date_from

    @property
    def event_date_to(self):
        """Gets the event_date_to of this EventLogRequest.  # noqa: E501

        end datetime  # noqa: E501

        :return: The event_date_to of this EventLogRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date_to

    @event_date_to.setter
    def event_date_to(self, event_date_to):
        """Sets the event_date_to of this EventLogRequest.

        end datetime  # noqa: E501

        :param event_date_to: The event_date_to of this EventLogRequest.  # noqa: E501
        :type: datetime
        """

        self._event_date_to = event_date_to

    @property
    def event_type(self):
        """Gets the event_type of this EventLogRequest.  # noqa: E501

        Event type  # noqa: E501

        :return: The event_type of this EventLogRequest.  # noqa: E501
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventLogRequest.

        Event type  # noqa: E501

        :param event_type: The event_type of this EventLogRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def ip_address(self):
        """Gets the ip_address of this EventLogRequest.  # noqa: E501

        IP address  # noqa: E501

        :return: The ip_address of this EventLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this EventLogRequest.

        IP address  # noqa: E501

        :param ip_address: The ip_address of this EventLogRequest.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def page_size(self):
        """Gets the page_size of this EventLogRequest.  # noqa: E501

        Max items in result, up to 20000  # noqa: E501

        :return: The page_size of this EventLogRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this EventLogRequest.

        Max items in result, up to 20000  # noqa: E501

        :param page_size: The page_size of this EventLogRequest.  # noqa: E501
        :type: int
        """
        if page_size is not None and page_size > 20000:  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `20000`")  # noqa: E501
        if page_size is not None and page_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_size = page_size

    @property
    def page_nr(self):
        """Gets the page_nr of this EventLogRequest.  # noqa: E501

        Result page nr  # noqa: E501

        :return: The page_nr of this EventLogRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """Sets the page_nr of this EventLogRequest.

        Result page nr  # noqa: E501

        :param page_nr: The page_nr of this EventLogRequest.  # noqa: E501
        :type: int
        """
        if page_nr is not None and page_nr > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if page_nr is not None and page_nr < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_nr = page_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventLogRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventLogRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
