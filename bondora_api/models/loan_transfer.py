# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoanTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'principal_amount': 'float',
        'interest_amount': 'float',
        'interest_amount_carried_over': 'float',
        'penalty_amount_carried_over': 'float',
        'total_amount': 'float'
    }

    attribute_map = {
        '_date': 'Date',
        'principal_amount': 'PrincipalAmount',
        'interest_amount': 'InterestAmount',
        'interest_amount_carried_over': 'InterestAmountCarriedOver',
        'penalty_amount_carried_over': 'PenaltyAmountCarriedOver',
        'total_amount': 'TotalAmount'
    }

    def __init__(self, _date=None, principal_amount=None, interest_amount=None, interest_amount_carried_over=None, penalty_amount_carried_over=None, total_amount=None):  # noqa: E501
        """LoanTransfer - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._principal_amount = None
        self._interest_amount = None
        self._interest_amount_carried_over = None
        self._penalty_amount_carried_over = None
        self._total_amount = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if principal_amount is not None:
            self.principal_amount = principal_amount
        if interest_amount is not None:
            self.interest_amount = interest_amount
        if interest_amount_carried_over is not None:
            self.interest_amount_carried_over = interest_amount_carried_over
        if penalty_amount_carried_over is not None:
            self.penalty_amount_carried_over = penalty_amount_carried_over
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def _date(self):
        """Gets the _date of this LoanTransfer.  # noqa: E501

        Payment date  # noqa: E501

        :return: The _date of this LoanTransfer.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this LoanTransfer.

        Payment date  # noqa: E501

        :param _date: The _date of this LoanTransfer.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def principal_amount(self):
        """Gets the principal_amount of this LoanTransfer.  # noqa: E501

        Principal amount  # noqa: E501

        :return: The principal_amount of this LoanTransfer.  # noqa: E501
        :rtype: float
        """
        return self._principal_amount

    @principal_amount.setter
    def principal_amount(self, principal_amount):
        """Sets the principal_amount of this LoanTransfer.

        Principal amount  # noqa: E501

        :param principal_amount: The principal_amount of this LoanTransfer.  # noqa: E501
        :type: float
        """

        self._principal_amount = principal_amount

    @property
    def interest_amount(self):
        """Gets the interest_amount of this LoanTransfer.  # noqa: E501

        Interest amount  # noqa: E501

        :return: The interest_amount of this LoanTransfer.  # noqa: E501
        :rtype: float
        """
        return self._interest_amount

    @interest_amount.setter
    def interest_amount(self, interest_amount):
        """Sets the interest_amount of this LoanTransfer.

        Interest amount  # noqa: E501

        :param interest_amount: The interest_amount of this LoanTransfer.  # noqa: E501
        :type: float
        """

        self._interest_amount = interest_amount

    @property
    def interest_amount_carried_over(self):
        """Gets the interest_amount_carried_over of this LoanTransfer.  # noqa: E501

        Interest carried over amount  # noqa: E501

        :return: The interest_amount_carried_over of this LoanTransfer.  # noqa: E501
        :rtype: float
        """
        return self._interest_amount_carried_over

    @interest_amount_carried_over.setter
    def interest_amount_carried_over(self, interest_amount_carried_over):
        """Sets the interest_amount_carried_over of this LoanTransfer.

        Interest carried over amount  # noqa: E501

        :param interest_amount_carried_over: The interest_amount_carried_over of this LoanTransfer.  # noqa: E501
        :type: float
        """

        self._interest_amount_carried_over = interest_amount_carried_over

    @property
    def penalty_amount_carried_over(self):
        """Gets the penalty_amount_carried_over of this LoanTransfer.  # noqa: E501

        Penalty amount  # noqa: E501

        :return: The penalty_amount_carried_over of this LoanTransfer.  # noqa: E501
        :rtype: float
        """
        return self._penalty_amount_carried_over

    @penalty_amount_carried_over.setter
    def penalty_amount_carried_over(self, penalty_amount_carried_over):
        """Sets the penalty_amount_carried_over of this LoanTransfer.

        Penalty amount  # noqa: E501

        :param penalty_amount_carried_over: The penalty_amount_carried_over of this LoanTransfer.  # noqa: E501
        :type: float
        """

        self._penalty_amount_carried_over = penalty_amount_carried_over

    @property
    def total_amount(self):
        """Gets the total_amount of this LoanTransfer.  # noqa: E501

        Total amount  # noqa: E501

        :return: The total_amount of this LoanTransfer.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this LoanTransfer.

        Total amount  # noqa: E501

        :param total_amount: The total_amount of this LoanTransfer.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
