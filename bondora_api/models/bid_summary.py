# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BidSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'auction_id': 'str',
        'requested_bid_amount': 'float',
        'actual_bid_amount': 'float',
        'requested_bid_minimum_limit': 'float',
        'bid_requested_date': 'datetime',
        'bid_processed_date': 'datetime',
        'is_request_being_processed': 'bool',
        'status_code': 'int',
        'failure_reason': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'auction_id': 'AuctionId',
        'requested_bid_amount': 'RequestedBidAmount',
        'actual_bid_amount': 'ActualBidAmount',
        'requested_bid_minimum_limit': 'RequestedBidMinimumLimit',
        'bid_requested_date': 'BidRequestedDate',
        'bid_processed_date': 'BidProcessedDate',
        'is_request_being_processed': 'IsRequestBeingProcessed',
        'status_code': 'StatusCode',
        'failure_reason': 'FailureReason'
    }

    def __init__(self, id=None, auction_id=None, requested_bid_amount=None, actual_bid_amount=None, requested_bid_minimum_limit=None, bid_requested_date=None, bid_processed_date=None, is_request_being_processed=None, status_code=None, failure_reason=None):  # noqa: E501
        """BidSummary - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._auction_id = None
        self._requested_bid_amount = None
        self._actual_bid_amount = None
        self._requested_bid_minimum_limit = None
        self._bid_requested_date = None
        self._bid_processed_date = None
        self._is_request_being_processed = None
        self._status_code = None
        self._failure_reason = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if auction_id is not None:
            self.auction_id = auction_id
        if requested_bid_amount is not None:
            self.requested_bid_amount = requested_bid_amount
        if actual_bid_amount is not None:
            self.actual_bid_amount = actual_bid_amount
        if requested_bid_minimum_limit is not None:
            self.requested_bid_minimum_limit = requested_bid_minimum_limit
        if bid_requested_date is not None:
            self.bid_requested_date = bid_requested_date
        if bid_processed_date is not None:
            self.bid_processed_date = bid_processed_date
        if is_request_being_processed is not None:
            self.is_request_being_processed = is_request_being_processed
        if status_code is not None:
            self.status_code = status_code
        if failure_reason is not None:
            self.failure_reason = failure_reason

    @property
    def id(self):
        """Gets the id of this BidSummary.  # noqa: E501

        Bid unique identifier  # noqa: E501

        :return: The id of this BidSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BidSummary.

        Bid unique identifier  # noqa: E501

        :param id: The id of this BidSummary.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def auction_id(self):
        """Gets the auction_id of this BidSummary.  # noqa: E501

        Id of auction to bid into  # noqa: E501

        :return: The auction_id of this BidSummary.  # noqa: E501
        :rtype: str
        """
        return self._auction_id

    @auction_id.setter
    def auction_id(self, auction_id):
        """Sets the auction_id of this BidSummary.

        Id of auction to bid into  # noqa: E501

        :param auction_id: The auction_id of this BidSummary.  # noqa: E501
        :type: str
        """

        self._auction_id = auction_id

    @property
    def requested_bid_amount(self):
        """Gets the requested_bid_amount of this BidSummary.  # noqa: E501

        Amount that was requested to bid  # noqa: E501

        :return: The requested_bid_amount of this BidSummary.  # noqa: E501
        :rtype: float
        """
        return self._requested_bid_amount

    @requested_bid_amount.setter
    def requested_bid_amount(self, requested_bid_amount):
        """Sets the requested_bid_amount of this BidSummary.

        Amount that was requested to bid  # noqa: E501

        :param requested_bid_amount: The requested_bid_amount of this BidSummary.  # noqa: E501
        :type: float
        """

        self._requested_bid_amount = requested_bid_amount

    @property
    def actual_bid_amount(self):
        """Gets the actual_bid_amount of this BidSummary.  # noqa: E501

        Amount that is bidded  # noqa: E501

        :return: The actual_bid_amount of this BidSummary.  # noqa: E501
        :rtype: float
        """
        return self._actual_bid_amount

    @actual_bid_amount.setter
    def actual_bid_amount(self, actual_bid_amount):
        """Sets the actual_bid_amount of this BidSummary.

        Amount that is bidded  # noqa: E501

        :param actual_bid_amount: The actual_bid_amount of this BidSummary.  # noqa: E501
        :type: float
        """

        self._actual_bid_amount = actual_bid_amount

    @property
    def requested_bid_minimum_limit(self):
        """Gets the requested_bid_minimum_limit of this BidSummary.  # noqa: E501

        Minimum amount that was specified for auction  # noqa: E501

        :return: The requested_bid_minimum_limit of this BidSummary.  # noqa: E501
        :rtype: float
        """
        return self._requested_bid_minimum_limit

    @requested_bid_minimum_limit.setter
    def requested_bid_minimum_limit(self, requested_bid_minimum_limit):
        """Sets the requested_bid_minimum_limit of this BidSummary.

        Minimum amount that was specified for auction  # noqa: E501

        :param requested_bid_minimum_limit: The requested_bid_minimum_limit of this BidSummary.  # noqa: E501
        :type: float
        """

        self._requested_bid_minimum_limit = requested_bid_minimum_limit

    @property
    def bid_requested_date(self):
        """Gets the bid_requested_date of this BidSummary.  # noqa: E501

        When bid was requested  # noqa: E501

        :return: The bid_requested_date of this BidSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._bid_requested_date

    @bid_requested_date.setter
    def bid_requested_date(self, bid_requested_date):
        """Sets the bid_requested_date of this BidSummary.

        When bid was requested  # noqa: E501

        :param bid_requested_date: The bid_requested_date of this BidSummary.  # noqa: E501
        :type: datetime
        """

        self._bid_requested_date = bid_requested_date

    @property
    def bid_processed_date(self):
        """Gets the bid_processed_date of this BidSummary.  # noqa: E501

        When bid was processed  # noqa: E501

        :return: The bid_processed_date of this BidSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._bid_processed_date

    @bid_processed_date.setter
    def bid_processed_date(self, bid_processed_date):
        """Sets the bid_processed_date of this BidSummary.

        When bid was processed  # noqa: E501

        :param bid_processed_date: The bid_processed_date of this BidSummary.  # noqa: E501
        :type: datetime
        """

        self._bid_processed_date = bid_processed_date

    @property
    def is_request_being_processed(self):
        """Gets the is_request_being_processed of this BidSummary.  # noqa: E501

        Is request currently processed  # noqa: E501

        :return: The is_request_being_processed of this BidSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_request_being_processed

    @is_request_being_processed.setter
    def is_request_being_processed(self, is_request_being_processed):
        """Sets the is_request_being_processed of this BidSummary.

        Is request currently processed  # noqa: E501

        :param is_request_being_processed: The is_request_being_processed of this BidSummary.  # noqa: E501
        :type: bool
        """

        self._is_request_being_processed = is_request_being_processed

    @property
    def status_code(self):
        """Gets the status_code of this BidSummary.  # noqa: E501

        Status of bid              <para>0 Pending</para><para>1 Open</para><para>2 Successful</para><para>3 Failed</para><para>4 Cancelled</para><para>5 Accepted</para>  # noqa: E501

        :return: The status_code of this BidSummary.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this BidSummary.

        Status of bid              <para>0 Pending</para><para>1 Open</para><para>2 Successful</para><para>3 Failed</para><para>4 Cancelled</para><para>5 Accepted</para>  # noqa: E501

        :param status_code: The status_code of this BidSummary.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    @property
    def failure_reason(self):
        """Gets the failure_reason of this BidSummary.  # noqa: E501

        Why bid failed  # noqa: E501

        :return: The failure_reason of this BidSummary.  # noqa: E501
        :rtype: int
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this BidSummary.

        Why bid failed  # noqa: E501

        :param failure_reason: The failure_reason of this BidSummary.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]  # noqa: E501
        if failure_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(failure_reason, allowed_values)
            )

        self._failure_reason = failure_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BidSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BidSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
