# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1  # noqa: E501

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SecondMarketItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'loan_status_active_from': 'datetime',
        'latest_debt_management_stage_type': 'int',
        'latest_debt_management_date': 'datetime',
        'price': 'float',
        'fee': 'float',
        'total_cost': 'float',
        'outstanding_payments': 'float',
        'desired_discount_rate': 'float',
        'xirr': 'float',
        'listed_on_date': 'datetime',
        'debt_managment_events': 'list[DebtManagementEvent]',
        'loan_transfers': 'list[LoanTransfer]',
        'scheduled_payments': 'list[ScheduledPayment]',
        'loan_part_id': 'str',
        'amount': 'float',
        'auction_id': 'str',
        'auction_name': 'str',
        'auction_number': 'int',
        'auction_bid_number': 'int',
        'investment_number': 'str',
        'country': 'str',
        'credit_score': 'float',
        'rating': 'str',
        'interest': 'float',
        'use_of_loan': 'int',
        'income_verification_status': 'int',
        'loan_status_code': 'int',
        'user_name': 'str',
        'gender': 'int',
        'date_of_birth': 'datetime',
        'signed_date': 'datetime',
        're_scheduled_on': 'datetime',
        'debt_occured_on': 'datetime',
        'debt_occured_on_for_secondary': 'datetime',
        'next_payment_nr': 'int',
        'next_payment_date': 'datetime',
        'next_payment_sum': 'float',
        'nr_of_scheduled_payments': 'int',
        'last_payment_date': 'datetime',
        'principal_repaid': 'float',
        'interest_repaid': 'float',
        'late_amount_paid': 'float',
        'principal_remaining': 'float',
        'principal_late_amount': 'float',
        'interest_late_amount': 'float',
        'penalty_late_amount': 'float',
        'late_amount_total': 'float',
        'principal_write_off_amount': 'float',
        'interest_write_off_amount': 'float',
        'penalty_write_off_amount': 'float',
        'debt_servicing_cost_main_amount': 'float',
        'debt_servicing_cost_interest_amount': 'float',
        'debt_servicing_cost_penalty_amount': 'float'
    }

    attribute_map = {
        'id': 'Id',
        'loan_status_active_from': 'LoanStatusActiveFrom',
        'latest_debt_management_stage_type': 'LatestDebtManagementStageType',
        'latest_debt_management_date': 'LatestDebtManagementDate',
        'price': 'Price',
        'fee': 'Fee',
        'total_cost': 'TotalCost',
        'outstanding_payments': 'OutstandingPayments',
        'desired_discount_rate': 'DesiredDiscountRate',
        'xirr': 'Xirr',
        'listed_on_date': 'ListedOnDate',
        'debt_managment_events': 'DebtManagmentEvents',
        'loan_transfers': 'LoanTransfers',
        'scheduled_payments': 'ScheduledPayments',
        'loan_part_id': 'LoanPartId',
        'amount': 'Amount',
        'auction_id': 'AuctionId',
        'auction_name': 'AuctionName',
        'auction_number': 'AuctionNumber',
        'auction_bid_number': 'AuctionBidNumber',
        'investment_number': 'InvestmentNumber',
        'country': 'Country',
        'credit_score': 'CreditScore',
        'rating': 'Rating',
        'interest': 'Interest',
        'use_of_loan': 'UseOfLoan',
        'income_verification_status': 'IncomeVerificationStatus',
        'loan_status_code': 'LoanStatusCode',
        'user_name': 'UserName',
        'gender': 'Gender',
        'date_of_birth': 'DateOfBirth',
        'signed_date': 'SignedDate',
        're_scheduled_on': 'ReScheduledOn',
        'debt_occured_on': 'DebtOccuredOn',
        'debt_occured_on_for_secondary': 'DebtOccuredOnForSecondary',
        'next_payment_nr': 'NextPaymentNr',
        'next_payment_date': 'NextPaymentDate',
        'next_payment_sum': 'NextPaymentSum',
        'nr_of_scheduled_payments': 'NrOfScheduledPayments',
        'last_payment_date': 'LastPaymentDate',
        'principal_repaid': 'PrincipalRepaid',
        'interest_repaid': 'InterestRepaid',
        'late_amount_paid': 'LateAmountPaid',
        'principal_remaining': 'PrincipalRemaining',
        'principal_late_amount': 'PrincipalLateAmount',
        'interest_late_amount': 'InterestLateAmount',
        'penalty_late_amount': 'PenaltyLateAmount',
        'late_amount_total': 'LateAmountTotal',
        'principal_write_off_amount': 'PrincipalWriteOffAmount',
        'interest_write_off_amount': 'InterestWriteOffAmount',
        'penalty_write_off_amount': 'PenaltyWriteOffAmount',
        'debt_servicing_cost_main_amount': 'DebtServicingCostMainAmount',
        'debt_servicing_cost_interest_amount': 'DebtServicingCostInterestAmount',
        'debt_servicing_cost_penalty_amount': 'DebtServicingCostPenaltyAmount'
    }

    def __init__(self, id=None, loan_status_active_from=None, latest_debt_management_stage_type=None, latest_debt_management_date=None, price=None, fee=None, total_cost=None, outstanding_payments=None, desired_discount_rate=None, xirr=None, listed_on_date=None, debt_managment_events=None, loan_transfers=None, scheduled_payments=None, loan_part_id=None, amount=None, auction_id=None, auction_name=None, auction_number=None, auction_bid_number=None, investment_number=None, country=None, credit_score=None, rating=None, interest=None, use_of_loan=None, income_verification_status=None, loan_status_code=None, user_name=None, gender=None, date_of_birth=None, signed_date=None, re_scheduled_on=None, debt_occured_on=None, debt_occured_on_for_secondary=None, next_payment_nr=None, next_payment_date=None, next_payment_sum=None, nr_of_scheduled_payments=None, last_payment_date=None, principal_repaid=None, interest_repaid=None, late_amount_paid=None, principal_remaining=None, principal_late_amount=None, interest_late_amount=None, penalty_late_amount=None, late_amount_total=None, principal_write_off_amount=None, interest_write_off_amount=None, penalty_write_off_amount=None, debt_servicing_cost_main_amount=None, debt_servicing_cost_interest_amount=None, debt_servicing_cost_penalty_amount=None):  # noqa: E501
        """SecondMarketItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._loan_status_active_from = None
        self._latest_debt_management_stage_type = None
        self._latest_debt_management_date = None
        self._price = None
        self._fee = None
        self._total_cost = None
        self._outstanding_payments = None
        self._desired_discount_rate = None
        self._xirr = None
        self._listed_on_date = None
        self._debt_managment_events = None
        self._loan_transfers = None
        self._scheduled_payments = None
        self._loan_part_id = None
        self._amount = None
        self._auction_id = None
        self._auction_name = None
        self._auction_number = None
        self._auction_bid_number = None
        self._investment_number = None
        self._country = None
        self._credit_score = None
        self._rating = None
        self._interest = None
        self._use_of_loan = None
        self._income_verification_status = None
        self._loan_status_code = None
        self._user_name = None
        self._gender = None
        self._date_of_birth = None
        self._signed_date = None
        self._re_scheduled_on = None
        self._debt_occured_on = None
        self._debt_occured_on_for_secondary = None
        self._next_payment_nr = None
        self._next_payment_date = None
        self._next_payment_sum = None
        self._nr_of_scheduled_payments = None
        self._last_payment_date = None
        self._principal_repaid = None
        self._interest_repaid = None
        self._late_amount_paid = None
        self._principal_remaining = None
        self._principal_late_amount = None
        self._interest_late_amount = None
        self._penalty_late_amount = None
        self._late_amount_total = None
        self._principal_write_off_amount = None
        self._interest_write_off_amount = None
        self._penalty_write_off_amount = None
        self._debt_servicing_cost_main_amount = None
        self._debt_servicing_cost_interest_amount = None
        self._debt_servicing_cost_penalty_amount = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if loan_status_active_from is not None:
            self.loan_status_active_from = loan_status_active_from
        if latest_debt_management_stage_type is not None:
            self.latest_debt_management_stage_type = latest_debt_management_stage_type
        if latest_debt_management_date is not None:
            self.latest_debt_management_date = latest_debt_management_date
        if price is not None:
            self.price = price
        if fee is not None:
            self.fee = fee
        if total_cost is not None:
            self.total_cost = total_cost
        if outstanding_payments is not None:
            self.outstanding_payments = outstanding_payments
        if desired_discount_rate is not None:
            self.desired_discount_rate = desired_discount_rate
        if xirr is not None:
            self.xirr = xirr
        if listed_on_date is not None:
            self.listed_on_date = listed_on_date
        if debt_managment_events is not None:
            self.debt_managment_events = debt_managment_events
        if loan_transfers is not None:
            self.loan_transfers = loan_transfers
        if scheduled_payments is not None:
            self.scheduled_payments = scheduled_payments
        if loan_part_id is not None:
            self.loan_part_id = loan_part_id
        if amount is not None:
            self.amount = amount
        if auction_id is not None:
            self.auction_id = auction_id
        if auction_name is not None:
            self.auction_name = auction_name
        if auction_number is not None:
            self.auction_number = auction_number
        if auction_bid_number is not None:
            self.auction_bid_number = auction_bid_number
        if investment_number is not None:
            self.investment_number = investment_number
        if country is not None:
            self.country = country
        if credit_score is not None:
            self.credit_score = credit_score
        if rating is not None:
            self.rating = rating
        if interest is not None:
            self.interest = interest
        if use_of_loan is not None:
            self.use_of_loan = use_of_loan
        if income_verification_status is not None:
            self.income_verification_status = income_verification_status
        if loan_status_code is not None:
            self.loan_status_code = loan_status_code
        if user_name is not None:
            self.user_name = user_name
        if gender is not None:
            self.gender = gender
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if signed_date is not None:
            self.signed_date = signed_date
        if re_scheduled_on is not None:
            self.re_scheduled_on = re_scheduled_on
        if debt_occured_on is not None:
            self.debt_occured_on = debt_occured_on
        if debt_occured_on_for_secondary is not None:
            self.debt_occured_on_for_secondary = debt_occured_on_for_secondary
        if next_payment_nr is not None:
            self.next_payment_nr = next_payment_nr
        if next_payment_date is not None:
            self.next_payment_date = next_payment_date
        if next_payment_sum is not None:
            self.next_payment_sum = next_payment_sum
        if nr_of_scheduled_payments is not None:
            self.nr_of_scheduled_payments = nr_of_scheduled_payments
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if principal_repaid is not None:
            self.principal_repaid = principal_repaid
        if interest_repaid is not None:
            self.interest_repaid = interest_repaid
        if late_amount_paid is not None:
            self.late_amount_paid = late_amount_paid
        if principal_remaining is not None:
            self.principal_remaining = principal_remaining
        if principal_late_amount is not None:
            self.principal_late_amount = principal_late_amount
        if interest_late_amount is not None:
            self.interest_late_amount = interest_late_amount
        if penalty_late_amount is not None:
            self.penalty_late_amount = penalty_late_amount
        if late_amount_total is not None:
            self.late_amount_total = late_amount_total
        if principal_write_off_amount is not None:
            self.principal_write_off_amount = principal_write_off_amount
        if interest_write_off_amount is not None:
            self.interest_write_off_amount = interest_write_off_amount
        if penalty_write_off_amount is not None:
            self.penalty_write_off_amount = penalty_write_off_amount
        if debt_servicing_cost_main_amount is not None:
            self.debt_servicing_cost_main_amount = debt_servicing_cost_main_amount
        if debt_servicing_cost_interest_amount is not None:
            self.debt_servicing_cost_interest_amount = debt_servicing_cost_interest_amount
        if debt_servicing_cost_penalty_amount is not None:
            self.debt_servicing_cost_penalty_amount = debt_servicing_cost_penalty_amount

    @property
    def id(self):
        """Gets the id of this SecondMarketItem.  # noqa: E501

        Item unique identifier  # noqa: E501

        :return: The id of this SecondMarketItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SecondMarketItem.

        Item unique identifier  # noqa: E501

        :param id: The id of this SecondMarketItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def loan_status_active_from(self):
        """Gets the loan_status_active_from of this SecondMarketItem.  # noqa: E501

        Loan status active from  # noqa: E501

        :return: The loan_status_active_from of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._loan_status_active_from

    @loan_status_active_from.setter
    def loan_status_active_from(self, loan_status_active_from):
        """Sets the loan_status_active_from of this SecondMarketItem.

        Loan status active from  # noqa: E501

        :param loan_status_active_from: The loan_status_active_from of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._loan_status_active_from = loan_status_active_from

    @property
    def latest_debt_management_stage_type(self):
        """Gets the latest_debt_management_stage_type of this SecondMarketItem.  # noqa: E501

        Latest debt management stage type  # noqa: E501

        :return: The latest_debt_management_stage_type of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._latest_debt_management_stage_type

    @latest_debt_management_stage_type.setter
    def latest_debt_management_stage_type(self, latest_debt_management_stage_type):
        """Sets the latest_debt_management_stage_type of this SecondMarketItem.

        Latest debt management stage type  # noqa: E501

        :param latest_debt_management_stage_type: The latest_debt_management_stage_type of this SecondMarketItem.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, -1]  # noqa: E501
        if latest_debt_management_stage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `latest_debt_management_stage_type` ({0}), must be one of {1}"  # noqa: E501
                .format(latest_debt_management_stage_type, allowed_values)
            )

        self._latest_debt_management_stage_type = latest_debt_management_stage_type

    @property
    def latest_debt_management_date(self):
        """Gets the latest_debt_management_date of this SecondMarketItem.  # noqa: E501

        Latest debt management date  # noqa: E501

        :return: The latest_debt_management_date of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_debt_management_date

    @latest_debt_management_date.setter
    def latest_debt_management_date(self, latest_debt_management_date):
        """Sets the latest_debt_management_date of this SecondMarketItem.

        Latest debt management date  # noqa: E501

        :param latest_debt_management_date: The latest_debt_management_date of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._latest_debt_management_date = latest_debt_management_date

    @property
    def price(self):
        """Gets the price of this SecondMarketItem.  # noqa: E501

        Outstanding principal balance +/- discount or mark-up  # noqa: E501

        :return: The price of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SecondMarketItem.

        Outstanding principal balance +/- discount or mark-up  # noqa: E501

        :param price: The price of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def fee(self):
        """Gets the fee of this SecondMarketItem.  # noqa: E501

        Secondary market purchase fee paid to Bondora  # noqa: E501

        :return: The fee of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this SecondMarketItem.

        Secondary market purchase fee paid to Bondora  # noqa: E501

        :param fee: The fee of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def total_cost(self):
        """Gets the total_cost of this SecondMarketItem.  # noqa: E501

        Total amount paid for purchase  # noqa: E501

        :return: The total_cost of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this SecondMarketItem.

        Total amount paid for purchase  # noqa: E501

        :param total_cost: The total_cost of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def outstanding_payments(self):
        """Gets the outstanding_payments of this SecondMarketItem.  # noqa: E501

        Total amount still to be repaid by the borrower. This includes the principal balance, accrued interest and late charges as well as any future scheduled interest payments  # noqa: E501

        :return: The outstanding_payments of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_payments

    @outstanding_payments.setter
    def outstanding_payments(self, outstanding_payments):
        """Sets the outstanding_payments of this SecondMarketItem.

        Total amount still to be repaid by the borrower. This includes the principal balance, accrued interest and late charges as well as any future scheduled interest payments  # noqa: E501

        :param outstanding_payments: The outstanding_payments of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._outstanding_payments = outstanding_payments

    @property
    def desired_discount_rate(self):
        """Gets the desired_discount_rate of this SecondMarketItem.  # noqa: E501

        Discount rate percent  # noqa: E501

        :return: The desired_discount_rate of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._desired_discount_rate

    @desired_discount_rate.setter
    def desired_discount_rate(self, desired_discount_rate):
        """Sets the desired_discount_rate of this SecondMarketItem.

        Discount rate percent  # noqa: E501

        :param desired_discount_rate: The desired_discount_rate of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._desired_discount_rate = desired_discount_rate

    @property
    def xirr(self):
        """Gets the xirr of this SecondMarketItem.  # noqa: E501

        XIRR (extended internal rate of return) is a methodology to calculate the net return using the loan issued date and amount,               loan repayment dates and amounts and the principal balance according to the original repayment date.               All overdue principal payments are written off immediately. No provisions for future losses are made and only received (not accrued or scheduled)               interest payments are taken into account.  # noqa: E501

        :return: The xirr of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._xirr

    @xirr.setter
    def xirr(self, xirr):
        """Sets the xirr of this SecondMarketItem.

        XIRR (extended internal rate of return) is a methodology to calculate the net return using the loan issued date and amount,               loan repayment dates and amounts and the principal balance according to the original repayment date.               All overdue principal payments are written off immediately. No provisions for future losses are made and only received (not accrued or scheduled)               interest payments are taken into account.  # noqa: E501

        :param xirr: The xirr of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._xirr = xirr

    @property
    def listed_on_date(self):
        """Gets the listed_on_date of this SecondMarketItem.  # noqa: E501

        Date when item was published  # noqa: E501

        :return: The listed_on_date of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._listed_on_date

    @listed_on_date.setter
    def listed_on_date(self, listed_on_date):
        """Sets the listed_on_date of this SecondMarketItem.

        Date when item was published  # noqa: E501

        :param listed_on_date: The listed_on_date of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._listed_on_date = listed_on_date

    @property
    def debt_managment_events(self):
        """Gets the debt_managment_events of this SecondMarketItem.  # noqa: E501

        Webhook only:              Debt managment event collection  # noqa: E501

        :return: The debt_managment_events of this SecondMarketItem.  # noqa: E501
        :rtype: list[DebtManagementEvent]
        """
        return self._debt_managment_events

    @debt_managment_events.setter
    def debt_managment_events(self, debt_managment_events):
        """Sets the debt_managment_events of this SecondMarketItem.

        Webhook only:              Debt managment event collection  # noqa: E501

        :param debt_managment_events: The debt_managment_events of this SecondMarketItem.  # noqa: E501
        :type: list[DebtManagementEvent]
        """

        self._debt_managment_events = debt_managment_events

    @property
    def loan_transfers(self):
        """Gets the loan_transfers of this SecondMarketItem.  # noqa: E501

        Webhook only:              Collection of all loan payments  # noqa: E501

        :return: The loan_transfers of this SecondMarketItem.  # noqa: E501
        :rtype: list[LoanTransfer]
        """
        return self._loan_transfers

    @loan_transfers.setter
    def loan_transfers(self, loan_transfers):
        """Sets the loan_transfers of this SecondMarketItem.

        Webhook only:              Collection of all loan payments  # noqa: E501

        :param loan_transfers: The loan_transfers of this SecondMarketItem.  # noqa: E501
        :type: list[LoanTransfer]
        """

        self._loan_transfers = loan_transfers

    @property
    def scheduled_payments(self):
        """Gets the scheduled_payments of this SecondMarketItem.  # noqa: E501

        Webhook only:              Collection of all loan scheduled payments.               Contains previous period values before rescheduling was made  # noqa: E501

        :return: The scheduled_payments of this SecondMarketItem.  # noqa: E501
        :rtype: list[ScheduledPayment]
        """
        return self._scheduled_payments

    @scheduled_payments.setter
    def scheduled_payments(self, scheduled_payments):
        """Sets the scheduled_payments of this SecondMarketItem.

        Webhook only:              Collection of all loan scheduled payments.               Contains previous period values before rescheduling was made  # noqa: E501

        :param scheduled_payments: The scheduled_payments of this SecondMarketItem.  # noqa: E501
        :type: list[ScheduledPayment]
        """

        self._scheduled_payments = scheduled_payments

    @property
    def loan_part_id(self):
        """Gets the loan_part_id of this SecondMarketItem.  # noqa: E501

        LoanPart unique identifier  # noqa: E501

        :return: The loan_part_id of this SecondMarketItem.  # noqa: E501
        :rtype: str
        """
        return self._loan_part_id

    @loan_part_id.setter
    def loan_part_id(self, loan_part_id):
        """Sets the loan_part_id of this SecondMarketItem.

        LoanPart unique identifier  # noqa: E501

        :param loan_part_id: The loan_part_id of this SecondMarketItem.  # noqa: E501
        :type: str
        """

        self._loan_part_id = loan_part_id

    @property
    def amount(self):
        """Gets the amount of this SecondMarketItem.  # noqa: E501

        Investment amount  # noqa: E501

        :return: The amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SecondMarketItem.

        Investment amount  # noqa: E501

        :param amount: The amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def auction_id(self):
        """Gets the auction_id of this SecondMarketItem.  # noqa: E501

        Auction unique identifier  # noqa: E501

        :return: The auction_id of this SecondMarketItem.  # noqa: E501
        :rtype: str
        """
        return self._auction_id

    @auction_id.setter
    def auction_id(self, auction_id):
        """Sets the auction_id of this SecondMarketItem.

        Auction unique identifier  # noqa: E501

        :param auction_id: The auction_id of this SecondMarketItem.  # noqa: E501
        :type: str
        """

        self._auction_id = auction_id

    @property
    def auction_name(self):
        """Gets the auction_name of this SecondMarketItem.  # noqa: E501

        Auction name  # noqa: E501

        :return: The auction_name of this SecondMarketItem.  # noqa: E501
        :rtype: str
        """
        return self._auction_name

    @auction_name.setter
    def auction_name(self, auction_name):
        """Sets the auction_name of this SecondMarketItem.

        Auction name  # noqa: E501

        :param auction_name: The auction_name of this SecondMarketItem.  # noqa: E501
        :type: str
        """

        self._auction_name = auction_name

    @property
    def auction_number(self):
        """Gets the auction_number of this SecondMarketItem.  # noqa: E501

        Auction number  # noqa: E501

        :return: The auction_number of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._auction_number

    @auction_number.setter
    def auction_number(self, auction_number):
        """Sets the auction_number of this SecondMarketItem.

        Auction number  # noqa: E501

        :param auction_number: The auction_number of this SecondMarketItem.  # noqa: E501
        :type: int
        """

        self._auction_number = auction_number

    @property
    def auction_bid_number(self):
        """Gets the auction_bid_number of this SecondMarketItem.  # noqa: E501

        Auction bid number  # noqa: E501

        :return: The auction_bid_number of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._auction_bid_number

    @auction_bid_number.setter
    def auction_bid_number(self, auction_bid_number):
        """Sets the auction_bid_number of this SecondMarketItem.

        Auction bid number  # noqa: E501

        :param auction_bid_number: The auction_bid_number of this SecondMarketItem.  # noqa: E501
        :type: int
        """

        self._auction_bid_number = auction_bid_number

    @property
    def investment_number(self):
        """Gets the investment_number of this SecondMarketItem.  # noqa: E501

        Auction number + Auction bid number combined  # noqa: E501

        :return: The investment_number of this SecondMarketItem.  # noqa: E501
        :rtype: str
        """
        return self._investment_number

    @investment_number.setter
    def investment_number(self, investment_number):
        """Sets the investment_number of this SecondMarketItem.

        Auction number + Auction bid number combined  # noqa: E501

        :param investment_number: The investment_number of this SecondMarketItem.  # noqa: E501
        :type: str
        """

        self._investment_number = investment_number

    @property
    def country(self):
        """Gets the country of this SecondMarketItem.  # noqa: E501

        Residency of the borrower  # noqa: E501

        :return: The country of this SecondMarketItem.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SecondMarketItem.

        Residency of the borrower  # noqa: E501

        :param country: The country of this SecondMarketItem.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def credit_score(self):
        """Gets the credit_score of this SecondMarketItem.  # noqa: E501

        <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>  # noqa: E501

        :return: The credit_score of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._credit_score

    @credit_score.setter
    def credit_score(self, credit_score):
        """Sets the credit_score of this SecondMarketItem.

        <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>  # noqa: E501

        :param credit_score: The credit_score of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._credit_score = credit_score

    @property
    def rating(self):
        """Gets the rating of this SecondMarketItem.  # noqa: E501

        Bondora Rating issued by the Rating model  # noqa: E501

        :return: The rating of this SecondMarketItem.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this SecondMarketItem.

        Bondora Rating issued by the Rating model  # noqa: E501

        :param rating: The rating of this SecondMarketItem.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def interest(self):
        """Gets the interest of this SecondMarketItem.  # noqa: E501

        Current interest rate  # noqa: E501

        :return: The interest of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this SecondMarketItem.

        Current interest rate  # noqa: E501

        :param interest: The interest of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._interest = interest

    @property
    def use_of_loan(self):
        """Gets the use_of_loan of this SecondMarketItem.  # noqa: E501

        Use of loan  # noqa: E501

        :return: The use_of_loan of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._use_of_loan

    @use_of_loan.setter
    def use_of_loan(self, use_of_loan):
        """Sets the use_of_loan of this SecondMarketItem.

        Use of loan  # noqa: E501

        :param use_of_loan: The use_of_loan of this SecondMarketItem.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, -1]  # noqa: E501
        if use_of_loan not in allowed_values:
            raise ValueError(
                "Invalid value for `use_of_loan` ({0}), must be one of {1}"  # noqa: E501
                .format(use_of_loan, allowed_values)
            )

        self._use_of_loan = use_of_loan

    @property
    def income_verification_status(self):
        """Gets the income_verification_status of this SecondMarketItem.  # noqa: E501

        Income verification type  # noqa: E501

        :return: The income_verification_status of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._income_verification_status

    @income_verification_status.setter
    def income_verification_status(self, income_verification_status):
        """Sets the income_verification_status of this SecondMarketItem.

        Income verification type  # noqa: E501

        :param income_verification_status: The income_verification_status of this SecondMarketItem.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if income_verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `income_verification_status` ({0}), must be one of {1}"  # noqa: E501
                .format(income_verification_status, allowed_values)
            )

        self._income_verification_status = income_verification_status

    @property
    def loan_status_code(self):
        """Gets the loan_status_code of this SecondMarketItem.  # noqa: E501

        Loan status code              <para>0 Reserved</para><para>2 Current</para><para>3 Cancelled</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>  # noqa: E501

        :return: The loan_status_code of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._loan_status_code

    @loan_status_code.setter
    def loan_status_code(self, loan_status_code):
        """Sets the loan_status_code of this SecondMarketItem.

        Loan status code              <para>0 Reserved</para><para>2 Current</para><para>3 Cancelled</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>  # noqa: E501

        :param loan_status_code: The loan_status_code of this SecondMarketItem.  # noqa: E501
        :type: int
        """

        self._loan_status_code = loan_status_code

    @property
    def user_name(self):
        """Gets the user_name of this SecondMarketItem.  # noqa: E501

        Borrower's username  # noqa: E501

        :return: The user_name of this SecondMarketItem.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SecondMarketItem.

        Borrower's username  # noqa: E501

        :param user_name: The user_name of this SecondMarketItem.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def gender(self):
        """Gets the gender of this SecondMarketItem.  # noqa: E501

        Borrower's Gender  # noqa: E501

        :return: The gender of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this SecondMarketItem.

        Borrower's Gender  # noqa: E501

        :param gender: The gender of this SecondMarketItem.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this SecondMarketItem.  # noqa: E501

        Borrower's date of birth  # noqa: E501

        :return: The date_of_birth of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this SecondMarketItem.

        Borrower's date of birth  # noqa: E501

        :param date_of_birth: The date_of_birth of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def signed_date(self):
        """Gets the signed_date of this SecondMarketItem.  # noqa: E501

        Loan issued date  # noqa: E501

        :return: The signed_date of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._signed_date

    @signed_date.setter
    def signed_date(self, signed_date):
        """Sets the signed_date of this SecondMarketItem.

        Loan issued date  # noqa: E501

        :param signed_date: The signed_date of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._signed_date = signed_date

    @property
    def re_scheduled_on(self):
        """Gets the re_scheduled_on of this SecondMarketItem.  # noqa: E501

        Last rescheduling date  # noqa: E501

        :return: The re_scheduled_on of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._re_scheduled_on

    @re_scheduled_on.setter
    def re_scheduled_on(self, re_scheduled_on):
        """Sets the re_scheduled_on of this SecondMarketItem.

        Last rescheduling date  # noqa: E501

        :param re_scheduled_on: The re_scheduled_on of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._re_scheduled_on = re_scheduled_on

    @property
    def debt_occured_on(self):
        """Gets the debt_occured_on of this SecondMarketItem.  # noqa: E501

        Date and time when the principal part of the payment is overdue (PrincipalLateAmount is greater than zero).  # noqa: E501

        :return: The debt_occured_on of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._debt_occured_on

    @debt_occured_on.setter
    def debt_occured_on(self, debt_occured_on):
        """Sets the debt_occured_on of this SecondMarketItem.

        Date and time when the principal part of the payment is overdue (PrincipalLateAmount is greater than zero).  # noqa: E501

        :param debt_occured_on: The debt_occured_on of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._debt_occured_on = debt_occured_on

    @property
    def debt_occured_on_for_secondary(self):
        """Gets the debt_occured_on_for_secondary of this SecondMarketItem.  # noqa: E501

        Date and time when loan part payment is overdue (principal, interest or penalty) aka when the dept occured for the loan part (LateAmountTotal is greater than zero).  # noqa: E501

        :return: The debt_occured_on_for_secondary of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary

    @debt_occured_on_for_secondary.setter
    def debt_occured_on_for_secondary(self, debt_occured_on_for_secondary):
        """Sets the debt_occured_on_for_secondary of this SecondMarketItem.

        Date and time when loan part payment is overdue (principal, interest or penalty) aka when the dept occured for the loan part (LateAmountTotal is greater than zero).  # noqa: E501

        :param debt_occured_on_for_secondary: The debt_occured_on_for_secondary of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._debt_occured_on_for_secondary = debt_occured_on_for_secondary

    @property
    def next_payment_nr(self):
        """Gets the next_payment_nr of this SecondMarketItem.  # noqa: E501

        Next scheduled payment number  # noqa: E501

        :return: The next_payment_nr of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._next_payment_nr

    @next_payment_nr.setter
    def next_payment_nr(self, next_payment_nr):
        """Sets the next_payment_nr of this SecondMarketItem.

        Next scheduled payment number  # noqa: E501

        :param next_payment_nr: The next_payment_nr of this SecondMarketItem.  # noqa: E501
        :type: int
        """

        self._next_payment_nr = next_payment_nr

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this SecondMarketItem.  # noqa: E501

        Next scheduled payment date  # noqa: E501

        :return: The next_payment_date of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this SecondMarketItem.

        Next scheduled payment date  # noqa: E501

        :param next_payment_date: The next_payment_date of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._next_payment_date = next_payment_date

    @property
    def next_payment_sum(self):
        """Gets the next_payment_sum of this SecondMarketItem.  # noqa: E501

        Next scheduled payment amount  # noqa: E501

        :return: The next_payment_sum of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._next_payment_sum

    @next_payment_sum.setter
    def next_payment_sum(self, next_payment_sum):
        """Sets the next_payment_sum of this SecondMarketItem.

        Next scheduled payment amount  # noqa: E501

        :param next_payment_sum: The next_payment_sum of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._next_payment_sum = next_payment_sum

    @property
    def nr_of_scheduled_payments(self):
        """Gets the nr_of_scheduled_payments of this SecondMarketItem.  # noqa: E501

        Total number of scheduled payments  # noqa: E501

        :return: The nr_of_scheduled_payments of this SecondMarketItem.  # noqa: E501
        :rtype: int
        """
        return self._nr_of_scheduled_payments

    @nr_of_scheduled_payments.setter
    def nr_of_scheduled_payments(self, nr_of_scheduled_payments):
        """Sets the nr_of_scheduled_payments of this SecondMarketItem.

        Total number of scheduled payments  # noqa: E501

        :param nr_of_scheduled_payments: The nr_of_scheduled_payments of this SecondMarketItem.  # noqa: E501
        :type: int
        """

        self._nr_of_scheduled_payments = nr_of_scheduled_payments

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this SecondMarketItem.  # noqa: E501

        Last payment date  # noqa: E501

        :return: The last_payment_date of this SecondMarketItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this SecondMarketItem.

        Last payment date  # noqa: E501

        :param last_payment_date: The last_payment_date of this SecondMarketItem.  # noqa: E501
        :type: datetime
        """

        self._last_payment_date = last_payment_date

    @property
    def principal_repaid(self):
        """Gets the principal_repaid of this SecondMarketItem.  # noqa: E501

        Total principal repaid amount  # noqa: E501

        :return: The principal_repaid of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._principal_repaid

    @principal_repaid.setter
    def principal_repaid(self, principal_repaid):
        """Sets the principal_repaid of this SecondMarketItem.

        Total principal repaid amount  # noqa: E501

        :param principal_repaid: The principal_repaid of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._principal_repaid = principal_repaid

    @property
    def interest_repaid(self):
        """Gets the interest_repaid of this SecondMarketItem.  # noqa: E501

        Total interest repaid amount  # noqa: E501

        :return: The interest_repaid of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._interest_repaid

    @interest_repaid.setter
    def interest_repaid(self, interest_repaid):
        """Sets the interest_repaid of this SecondMarketItem.

        Total interest repaid amount  # noqa: E501

        :param interest_repaid: The interest_repaid of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._interest_repaid = interest_repaid

    @property
    def late_amount_paid(self):
        """Gets the late_amount_paid of this SecondMarketItem.  # noqa: E501

        Total late charges paid amount  # noqa: E501

        :return: The late_amount_paid of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._late_amount_paid

    @late_amount_paid.setter
    def late_amount_paid(self, late_amount_paid):
        """Sets the late_amount_paid of this SecondMarketItem.

        Total late charges paid amount  # noqa: E501

        :param late_amount_paid: The late_amount_paid of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._late_amount_paid = late_amount_paid

    @property
    def principal_remaining(self):
        """Gets the principal_remaining of this SecondMarketItem.  # noqa: E501

        Remaining principal amount  # noqa: E501

        :return: The principal_remaining of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._principal_remaining

    @principal_remaining.setter
    def principal_remaining(self, principal_remaining):
        """Sets the principal_remaining of this SecondMarketItem.

        Remaining principal amount  # noqa: E501

        :param principal_remaining: The principal_remaining of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._principal_remaining = principal_remaining

    @property
    def principal_late_amount(self):
        """Gets the principal_late_amount of this SecondMarketItem.  # noqa: E501

        Principal debt amount  # noqa: E501

        :return: The principal_late_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._principal_late_amount

    @principal_late_amount.setter
    def principal_late_amount(self, principal_late_amount):
        """Sets the principal_late_amount of this SecondMarketItem.

        Principal debt amount  # noqa: E501

        :param principal_late_amount: The principal_late_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._principal_late_amount = principal_late_amount

    @property
    def interest_late_amount(self):
        """Gets the interest_late_amount of this SecondMarketItem.  # noqa: E501

        Interest debt amount  # noqa: E501

        :return: The interest_late_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._interest_late_amount

    @interest_late_amount.setter
    def interest_late_amount(self, interest_late_amount):
        """Sets the interest_late_amount of this SecondMarketItem.

        Interest debt amount  # noqa: E501

        :param interest_late_amount: The interest_late_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._interest_late_amount = interest_late_amount

    @property
    def penalty_late_amount(self):
        """Gets the penalty_late_amount of this SecondMarketItem.  # noqa: E501

        Late charges debt amount  # noqa: E501

        :return: The penalty_late_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._penalty_late_amount

    @penalty_late_amount.setter
    def penalty_late_amount(self, penalty_late_amount):
        """Sets the penalty_late_amount of this SecondMarketItem.

        Late charges debt amount  # noqa: E501

        :param penalty_late_amount: The penalty_late_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._penalty_late_amount = penalty_late_amount

    @property
    def late_amount_total(self):
        """Gets the late_amount_total of this SecondMarketItem.  # noqa: E501

        Late amount total  # noqa: E501

        :return: The late_amount_total of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._late_amount_total

    @late_amount_total.setter
    def late_amount_total(self, late_amount_total):
        """Sets the late_amount_total of this SecondMarketItem.

        Late amount total  # noqa: E501

        :param late_amount_total: The late_amount_total of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._late_amount_total = late_amount_total

    @property
    def principal_write_off_amount(self):
        """Gets the principal_write_off_amount of this SecondMarketItem.  # noqa: E501

        Total amount of principal written off  # noqa: E501

        :return: The principal_write_off_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._principal_write_off_amount

    @principal_write_off_amount.setter
    def principal_write_off_amount(self, principal_write_off_amount):
        """Sets the principal_write_off_amount of this SecondMarketItem.

        Total amount of principal written off  # noqa: E501

        :param principal_write_off_amount: The principal_write_off_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._principal_write_off_amount = principal_write_off_amount

    @property
    def interest_write_off_amount(self):
        """Gets the interest_write_off_amount of this SecondMarketItem.  # noqa: E501

        Total amount of interest written off  # noqa: E501

        :return: The interest_write_off_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._interest_write_off_amount

    @interest_write_off_amount.setter
    def interest_write_off_amount(self, interest_write_off_amount):
        """Sets the interest_write_off_amount of this SecondMarketItem.

        Total amount of interest written off  # noqa: E501

        :param interest_write_off_amount: The interest_write_off_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._interest_write_off_amount = interest_write_off_amount

    @property
    def penalty_write_off_amount(self):
        """Gets the penalty_write_off_amount of this SecondMarketItem.  # noqa: E501

        Total amount of penalty written off  # noqa: E501

        :return: The penalty_write_off_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._penalty_write_off_amount

    @penalty_write_off_amount.setter
    def penalty_write_off_amount(self, penalty_write_off_amount):
        """Sets the penalty_write_off_amount of this SecondMarketItem.

        Total amount of penalty written off  # noqa: E501

        :param penalty_write_off_amount: The penalty_write_off_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._penalty_write_off_amount = penalty_write_off_amount

    @property
    def debt_servicing_cost_main_amount(self):
        """Gets the debt_servicing_cost_main_amount of this SecondMarketItem.  # noqa: E501

        Total amount of principal debt servicing cost  # noqa: E501

        :return: The debt_servicing_cost_main_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._debt_servicing_cost_main_amount

    @debt_servicing_cost_main_amount.setter
    def debt_servicing_cost_main_amount(self, debt_servicing_cost_main_amount):
        """Sets the debt_servicing_cost_main_amount of this SecondMarketItem.

        Total amount of principal debt servicing cost  # noqa: E501

        :param debt_servicing_cost_main_amount: The debt_servicing_cost_main_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._debt_servicing_cost_main_amount = debt_servicing_cost_main_amount

    @property
    def debt_servicing_cost_interest_amount(self):
        """Gets the debt_servicing_cost_interest_amount of this SecondMarketItem.  # noqa: E501

        Total amount of interest debt servicing cost  # noqa: E501

        :return: The debt_servicing_cost_interest_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._debt_servicing_cost_interest_amount

    @debt_servicing_cost_interest_amount.setter
    def debt_servicing_cost_interest_amount(self, debt_servicing_cost_interest_amount):
        """Sets the debt_servicing_cost_interest_amount of this SecondMarketItem.

        Total amount of interest debt servicing cost  # noqa: E501

        :param debt_servicing_cost_interest_amount: The debt_servicing_cost_interest_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._debt_servicing_cost_interest_amount = debt_servicing_cost_interest_amount

    @property
    def debt_servicing_cost_penalty_amount(self):
        """Gets the debt_servicing_cost_penalty_amount of this SecondMarketItem.  # noqa: E501

        Total amount of penalty debt servicing cost  # noqa: E501

        :return: The debt_servicing_cost_penalty_amount of this SecondMarketItem.  # noqa: E501
        :rtype: float
        """
        return self._debt_servicing_cost_penalty_amount

    @debt_servicing_cost_penalty_amount.setter
    def debt_servicing_cost_penalty_amount(self, debt_servicing_cost_penalty_amount):
        """Sets the debt_servicing_cost_penalty_amount of this SecondMarketItem.

        Total amount of penalty debt servicing cost  # noqa: E501

        :param debt_servicing_cost_penalty_amount: The debt_servicing_cost_penalty_amount of this SecondMarketItem.  # noqa: E501
        :type: float
        """

        self._debt_servicing_cost_penalty_amount = debt_servicing_cost_penalty_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecondMarketItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecondMarketItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
